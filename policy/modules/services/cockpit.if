## <summary>Cockpit web management system for Linux</summary>
##
## <desc>
## Cockpit is a web console that enables users to administer Linux servers
## via a web browser.
## see https://cockpit-project.org/
##
## For linux logins that are allowed access they must be associated with a
## SELinux user that uses ssh_role_template (sysadm, system).  To be able
## to alter system settings the must be allowed sudo access.
## </desc>

########################################
## <summary>
##	Transition to the cockpit session domain.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed to transition.
## </summary>
## </param>
#
interface(`cockpit_domtrans_session',`
	gen_require(`
		type cockpit_session_t, cockpit_session_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, cockpit_session_exec_t, cockpit_session_t)
')

########################################
## <summary>
##	Allow specified domain to get status of cockpit service
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`cockpit_get_service_status',`
	gen_require(`
		type cockpit_unit_t;
		class service status;
	')

	allow $1 cockpit_unit_t:service status;
')

########################################
## <summary>
##	Allow specified domain to enable cockpit units
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`cockpit_enabledisable',`
	gen_require(`
		type cockpit_unit_t;
		class service { enable disable };
	')

	cockpit_get_service_status($1)
	allow $1 cockpit_unit_t:service { enable disable };
')

########################################
## <summary>
##	Allow specified domain to start cockpit units
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`cockpit_startstop',`
	gen_require(`
		type cockpit_unit_t;
		class service { start stop };
	')

	cockpit_get_service_status($1)
	allow $1 cockpit_unit_t:service { start stop };
')

########################################
## <summary>
##	Create, read, write, and delete the cockpick runtime symlink files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`cockpit_manage_runtime_symlnks',`
	gen_require(`
		type cockpit_runtime_t;
	')

	files_search_runtime($1)
	manage_lnk_files_pattern($1, cockpit_runtime_t, cockpit_runtime_t)
')

########################################
## <summary>
##	Manage the cockpit certificate files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`cockpit_manage_cert_files',`
	gen_require(`
		type cockpit_cert_t;
	')

	manage_files_pattern($1, cockpit_cert_t, cockpit_cert_t)
')

########################################
## <summary>
##	Read cockpit certificate files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`cockpit_read_cert_files',`
	gen_require(`
		type cockpit_cert_t;
	')

	files_search_etc($1)
	list_dirs_pattern($1, cockpit_cert_t, cockpit_cert_t)
	read_files_pattern($1, cockpit_cert_t, cockpit_cert_t)
')

########################################
## <summary>
##	Delete cockpit certificate files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`cockpit_delete_cert_files',`
	gen_require(`
		type cockpit_cert_t;
		type cockpit_runtime_t;
	')

	list_dirs_pattern($1, cockpit_runtime_t, cockpit_runtime_t)
	delete_files_pattern($1, cockpit_runtime_t, cockpit_cert_t)
')

########################################
## <summary>
##	All of the rules required to administrate
##	an cockpit environment
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`cockpit_admin',`
	gen_require(`
		type cockpit_ws_t;
		type cockpit_session_t;
		type cockpit_state_t;
		type cockpit_runtime_t;
		type cockpit_unit_t;
	')

	allow $1 cockpit_ws_t:process { ptrace signal_perms };
	ps_process_pattern($1, cockpit_ws_t)

	allow $1 cockpit_session_t:process { ptrace signal_perms };
	ps_process_pattern($1, cockpit_session_t)

	files_search_var_lib($1)
	admin_pattern($1, cockpit_state_t)
	admin_pattern($1, cockpit_runtime_t)

	cockpit_enabledisable($1)
	cockpit_startstop($1)
	admin_pattern($1, cockpit_unit_t)
')
