policy_module(kubernetes)

########################################
#
# Declarations
#

attribute_role kubernetes_roles;
roleattribute system_r kubernetes_roles;

# common attribute for all container engines
# that may be used with kubernetes
attribute kubernetes_container_engine_domain;

# common attribute for all container domains
# that may be used with kubernetes
attribute kubernetes_container_domain;

# attribute for all objects that may be mounted
# on by kubernetes containers
attribute kubernetes_mountpoint_type;

# common attribute for all kubectl domains
attribute kubectl_domain;

type kubelet_t;
type kubelet_exec_t;
domain_type(kubelet_t)
container_engine_executable_file(kubelet_exec_t)
init_daemon_domain(kubelet_t, kubelet_exec_t)
role kubernetes_roles types kubelet_t;

type kubeadm_t;
type kubeadm_exec_t;
application_domain(kubeadm_t, kubeadm_exec_t)
role kubernetes_roles types kubeadm_t;

type kubectl_t, kubectl_domain;
type kubectl_exec_t;
application_domain(kubectl_t, kubectl_exec_t)

type kubernetes_plugin_t;
corecmd_executable_file(kubernetes_plugin_t)
kubernetes_mountpoint(kubernetes_plugin_t)

type kubernetes_config_t;
files_config_file(kubernetes_config_t)
kubernetes_mountpoint(kubernetes_config_t)

type kubernetes_runtime_t;
files_runtime_file(kubernetes_runtime_t)
kubernetes_mountpoint(kubernetes_runtime_t)

# files created in /tmp by kubectl for editing
type kubernetes_tmp_t;
files_tmp_file(kubernetes_tmp_t)

type kubernetes_tmpfs_t;
files_type(kubernetes_tmpfs_t)

type kubernetes_unit_t;
init_unit_file(kubernetes_unit_t)

type kubernetes_home_t;
xdg_config_content(kubernetes_home_t)

########################################
#
# common kubernetes container engine policy
#

allow kubernetes_container_engine_domain kubernetes_mountpoint_type:dir_file_class_set { getattr mounton };

files_getattr_kernel_modules(kubernetes_container_engine_domain)

fs_mounton_tmpfs(kubernetes_container_engine_domain)

iptables_getattr_runtime_files(kubernetes_container_engine_domain)

corecmd_search_bin(kubernetes_container_engine_domain)
allow kubernetes_container_engine_domain kubernetes_plugin_t:dir search_dir_perms;

container_use_container_ptys(kubernetes_container_engine_domain)

container_exec_plugins(kubernetes_container_engine_domain)

container_search_logs(kubernetes_container_engine_domain)
container_watch_log_dirs(kubernetes_container_engine_domain)

container_filetrans_var_lib_file(kubernetes_container_engine_domain, dir, "calico")
container_filetrans_var_lib_file(kubernetes_container_engine_domain, dir, "etcd")

ifdef(`init_systemd',`
	init_dbus_chat(kubernetes_container_engine_domain)

	init_get_system_status(kubernetes_container_engine_domain)
	init_start_system(kubernetes_container_engine_domain)
	init_stop_system(kubernetes_container_engine_domain)

	init_get_transient_units_status(kubernetes_container_engine_domain)
	init_start_transient_units(kubernetes_container_engine_domain)
	init_stop_transient_units(kubernetes_container_engine_domain)
')

########################################
#
# kubelet local policy
#

allow kubelet_t self:process { getattr getsched setrlimit signal };
allow kubelet_t self:capability { chown dac_override dac_read_search net_admin net_raw sys_ptrace sys_resource };
allow kubelet_t self:cap_userns sys_ptrace;
allow kubelet_t self:fifo_file rw_fifo_file_perms;
allow kubelet_t self:rawip_socket create_socket_perms;
allow kubelet_t self:tcp_socket create_stream_socket_perms;
allow kubelet_t self:unix_dgram_socket create_socket_perms;
allow kubelet_t self:unix_stream_socket { connectto create_stream_socket_perms };

allow kubelet_t kubernetes_plugin_t:dir { create_dir_perms list_dir_perms watch };
allow kubelet_t kubernetes_plugin_t:file { create_file_perms rw_file_perms };
can_exec(kubelet_t, kubernetes_plugin_t)
# kubelet drops plugins in /usr/libexec/kubernetes
corecmd_bin_filetrans(kubelet_t, kubernetes_plugin_t, dir, "kubernetes")

allow kubelet_t kubernetes_config_t:dir { list_dir_perms watch };
allow kubelet_t kubernetes_config_t:file { read_file_perms watch };
allow kubelet_t kubernetes_config_t:lnk_file read_lnk_file_perms;
files_etc_filetrans(kubelet_t, kubernetes_config_t, dir)

allow kubelet_t kubernetes_tmpfs_t:dir manage_dir_perms;
allow kubelet_t kubernetes_tmpfs_t:file manage_file_perms;
allow kubelet_t kubernetes_tmpfs_t:lnk_file manage_lnk_file_perms;
fs_tmpfs_filetrans(kubelet_t, kubernetes_tmpfs_t, { dir file lnk_file })

allow kubelet_t kubernetes_runtime_t:dir manage_dir_perms;
allow kubelet_t kubernetes_runtime_t:file manage_file_perms;
allow kubelet_t kubernetes_runtime_t:sock_file manage_sock_file_perms;
files_runtime_filetrans(kubelet_t, kubernetes_runtime_t, { dir file sock_file })

kubernetes_manage_tmpfs_dirs(kubelet_t)
kubernetes_manage_tmpfs_files(kubelet_t)
kubernetes_manage_tmpfs_symlinks(kubelet_t)
fs_tmpfs_filetrans(kubelet_t, kubernetes_tmpfs_t, { dir file lnk_file })

corenet_tcp_bind_generic_node(kubelet_t)

corenet_tcp_connect_http_port(kubelet_t)
corenet_tcp_bind_kubernetes_port(kubelet_t)
corenet_tcp_connect_kubernetes_port(kubelet_t)
corenet_tcp_connect_all_unreserved_ports(kubelet_t)

corecmd_search_bin(kubelet_t)
corecmd_watch_bin_dirs(kubelet_t)
corecmd_exec_bin(kubelet_t)

dev_getattr_mtrr_dev(kubelet_t)
dev_read_kmsg(kubelet_t)
dev_read_sysfs(kubelet_t)

domain_dontaudit_read_all_domains_state(kubelet_t)
domain_setpriority_all_domains(kubelet_t)

files_dontaudit_getattr_all_dirs(kubelet_t)
files_dontaudit_search_mnt(kubelet_t)
files_dontaudit_search_tmp(kubelet_t)
files_search_tmp(kubelet_t)
files_read_kernel_symbol_table(kubelet_t)
# read /usr/share/mime/globs2
files_read_usr_files(kubelet_t)

fs_getattr_tmpfs(kubelet_t)
fs_search_tmpfs(kubelet_t)
fs_getattr_xattr_fs(kubelet_t)
fs_getattr_cgroup(kubelet_t)
fs_list_cgroup_dirs(kubelet_t)
fs_watch_cgroup_dirs(kubelet_t)
fs_rw_cgroup_files(kubelet_t)

kernel_getattr_message_if(kubelet_t)
kernel_read_ring_buffer(kubelet_t)
kernel_read_irq_sysctls(kubelet_t)
kernel_read_network_state(kubelet_t)
kernel_read_system_state(kubelet_t)
kernel_rw_kernel_sysctl(kubelet_t)
kernel_rw_net_sysctls(kubelet_t)
kernel_rw_vm_overcommit_sysctl(kubelet_t)
kernel_dontaudit_getattr_proc(kubelet_t)
kernel_read_state(kubelet_t)

storage_dontaudit_getattr_fixed_disk_dev(kubelet_t)

auth_use_nsswitch(kubelet_t)

init_read_state(kubelet_t)

iptables_domtrans(kubelet_t)
iptables_getattr_runtime_files(kubelet_t)
iptables_read_state(kubelet_t)

logging_send_syslog_msg(kubelet_t)

miscfiles_read_generic_certs(kubelet_t)
miscfiles_read_localization(kubelet_t)

modutils_domtrans(kubelet_t)

mount_domtrans(kubelet_t)

seutil_read_default_contexts(kubelet_t)

userdom_dontaudit_search_user_runtime_root(kubelet_t)
userdom_use_user_terminals(kubelet_t)

dbus_list_system_bus_runtime(kubelet_t)
dbus_system_bus_client(kubelet_t)

container_read_config(kubelet_t)
container_getattr_fs(kubelet_t)
# read /run/docker.pid
container_read_runtime_files(kubelet_t)
# connect to docker, podman, etc.
container_stream_connect_system_engine(kubelet_t)
# connect to privileged static pods
container_stream_connect_spec_container(kubelet_t, kubernetes_container_domain)

# kubelet monitors open fds in its cgroups
container_read_all_container_state(kubelet_t)
container_read_all_container_engine_state(kubelet_t)

container_list_var_lib(kubelet_t)
container_manage_dirs(kubelet_t)
container_manage_files(kubelet_t)
container_manage_lnk_files(kubelet_t)
container_manage_sock_files(kubelet_t)
container_rw_fifo_files(kubelet_t)
container_watch_dirs(kubelet_t)
container_list_ro_dirs(kubelet_t)

container_manage_log_dirs(kubelet_t)
container_manage_log_files(kubelet_t)
container_manage_log_symlinks(kubelet_t)

# kubelet will preemptively relabel container
# files to the same label even if the labels
# are correct, so just dontaudit these
container_dontaudit_relabel_dirs(kubelet_t)
container_dontaudit_relabel_files(kubelet_t)

container_log_filetrans(kubelet_t, { dir file })

container_manage_var_lib_dirs(kubelet_t)
container_manage_var_lib_files(kubelet_t)
container_manage_var_lib_lnk_files(kubelet_t)
container_manage_var_lib_sock_files(kubelet_t)
container_var_lib_filetrans(kubelet_t, dir)
container_filetrans_var_lib_file(kubelet_t, dir, "device-plugins")
container_filetrans_var_lib_file(kubelet_t, dir, "pods")
container_filetrans_var_lib_file(kubelet_t, dir, "plugins")
container_filetrans_var_lib_file(kubelet_t, dir, "plugins_registry")

ifdef(`init_systemd',`
	init_dbus_chat(kubelet_t)

	init_start_system(kubelet_t)
	init_stop_system(kubelet_t)
	init_get_transient_units_status(kubelet_t)
	init_start_transient_units(kubelet_t)
	init_stop_transient_units(kubelet_t)

	kubernetes_get_unit_status(kubelet_t)
	kubernetes_start_unit(kubelet_t)
	kubernetes_stop_unit(kubelet_t)
')

optional_policy(`
	docker_read_state(kubelet_t)
	docker_write_state(kubelet_t)
')

optional_policy(`
	crio_read_conmon_state(kubelet_t)
')

########################################
#
# kubeadm local policy
#

allow kubeadm_t self:process { getsched signal };
# cap_sysadmin is required to unmount volumes in /var/lib/kubelet
allow kubeadm_t self:capability { dac_override dac_read_search net_admin sys_admin };
allow kubeadm_t self:fifo_file rw_fifo_file_perms;
allow kubeadm_t self:netlink_route_socket create_netlink_socket_perms;
allow kubeadm_t self:tcp_socket create_stream_socket_perms;
allow kubeadm_t self:udp_socket create_socket_perms;
allow kubeadm_t self:unix_dgram_socket create_socket_perms;

domtrans_pattern(kubeadm_t, kubelet_exec_t, kubelet_t)
ps_process_pattern(kubeadm_t, kubelet_t)

manage_dirs_pattern(kubeadm_t, kubernetes_config_t, kubernetes_config_t)
manage_files_pattern(kubeadm_t, kubernetes_config_t, kubernetes_config_t)
manage_lnk_files_pattern(kubeadm_t, kubernetes_config_t, kubernetes_config_t)

allow kubeadm_t kubernetes_home_t:dir search_dir_perms;
allow kubeadm_t kubernetes_home_t:file read_file_perms;
allow kubeadm_t kubernetes_home_t:lnk_file read_lnk_file_perms;

corenet_tcp_bind_generic_node(kubeadm_t)

corenet_tcp_connect_http_port(kubeadm_t)
corenet_tcp_bind_kubernetes_port(kubeadm_t)
corenet_tcp_connect_kubernetes_port(kubeadm_t)

corecmd_getattr_all_executables(kubeadm_t)
corecmd_exec_bin(kubeadm_t)

domain_use_interactive_fds(kubeadm_t)

files_read_boot_files(kubeadm_t)
files_read_etc_files(kubeadm_t)
files_search_kernel_modules(kubeadm_t)
files_search_src(kubeadm_t)
files_read_usr_files(kubeadm_t)
files_read_usr_src_files(kubeadm_t)

fs_getattr_tmpfs(kubeadm_t)
fs_list_tmpfs(kubeadm_t)
fs_unmount_tmpfs(kubeadm_t)
fs_getattr_xattr_fs(kubeadm_t)
fs_getattr_cgroup(kubeadm_t)
fs_search_cgroup_dirs(kubeadm_t)
fs_read_cgroup_files(kubeadm_t)

kernel_read_network_state(kubeadm_t)
kernel_read_system_state(kubeadm_t)
kernel_read_net_sysctls(kubeadm_t)
kernel_read_kernel_sysctls(kubeadm_t)
kernel_dontaudit_getattr_proc(kubeadm_t)

auth_use_nsswitch(kubeadm_t)

init_read_state(kubeadm_t)
init_write_runtime_socket(kubeadm_t)

logging_search_logs(kubeadm_t)

miscfiles_read_generic_certs(kubeadm_t)
miscfiles_read_localization(kubeadm_t)

modutils_exec(kubeadm_t)
modutils_read_module_config(kubeadm_t)
modutils_read_module_deps(kubeadm_t)

userdom_search_user_home_content(kubeadm_t)
userdom_use_user_terminals(kubeadm_t)
userdom_lock_user_terminals(kubeadm_t)

# getattr on /run/docker.sock
container_getattr_runtime_sock_files(kubeadm_t)
# for connecting to cri-o and maybe others
container_stream_connect_system_engine(kubeadm_t)

container_list_var_lib(kubeadm_t)
container_manage_var_lib_dirs(kubeadm_t)
container_manage_var_lib_files(kubeadm_t)
container_filetrans_var_lib_file(kubeadm_t, dir, "etcd")

container_manage_dirs(kubeadm_t)
container_manage_files(kubeadm_t)
container_manage_lnk_files(kubeadm_t)
container_manage_sock_files(kubeadm_t)

container_manage_var_lib_dirs(kubeadm_t)
container_manage_var_lib_files(kubeadm_t)
container_manage_var_lib_lnk_files(kubeadm_t)
container_manage_var_lib_sock_files(kubeadm_t)
container_var_lib_filetrans(kubeadm_t, dir)

ifdef(`init_systemd',`
	init_get_system_status(kubeadm_t)
	init_reload(kubeadm_t)

	init_get_generic_units_status(kubeadm_t)

	kubernetes_get_unit_status(kubeadm_t)
	kubernetes_start_unit(kubeadm_t)
	kubernetes_stop_unit(kubeadm_t)

	systemd_list_journal_dirs(kubeadm_t)
	systemd_read_journal_files(kubeadm_t)
')

optional_policy(`
	docker_domtrans_cli(kubeadm_t)
	docker_read_state(kubeadm_t)
')

########################################
#
# common kubectl local policy
#

allow kubectl_domain self:process { getsched signal };
allow kubectl_domain self:fifo_file rw_fifo_file_perms;
allow kubectl_domain self:tcp_socket create_stream_socket_perms;

manage_dirs_pattern(kubectl_domain, kubernetes_conf_home_t, kubernetes_conf_home_t)
manage_files_pattern(kubectl_domain, kubernetes_conf_home_t, kubernetes_conf_home_t)
read_lnk_files_pattern(kubectl_domain, kubernetes_conf_home_t, kubernetes_conf_home_t)

files_search_tmp(kubectl_domain)
manage_files_pattern(kubectl_domain, kubernetes_tmp_t, kubernetes_tmp_t)
files_tmp_filetrans(kubectl_domain, kubernetes_tmp_t, file)

# binds to 8001 for proxy
corenet_tcp_bind_all_unreserved_ports(kubectl_domain)
corenet_tcp_bind_generic_node(kubectl_domain)
corenet_tcp_connect_http_port(kubectl_domain)
corenet_tcp_connect_kubernetes_port(kubectl_domain)

domain_use_interactive_fds(kubectl_domain)

files_read_etc_files(kubectl_domain)
files_read_usr_files(kubectl_domain)

kernel_dontaudit_search_network_sysctl(kubectl_domain)

miscfiles_read_generic_certs(kubectl_domain)
miscfiles_read_localization(kubectl_domain)

userdom_use_user_terminals(kubectl_domain)

########################################
#
# kubectl local policy
#

auth_use_nsswitch(kubectl_t)
