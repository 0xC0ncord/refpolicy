## <summary>Policy for containers</summary>

#######################################
## <summary>
##	The template to define a container domain.
## </summary>
## <param name="domain_prefix">
##	<summary>
##	Domain prefix to be used.
##	</summary>
## </param>
#
template(`container_domain_template',`
	gen_require(`
		attribute_role container_roles;
		attribute container_domain;
	')

	type $1_t, container_domain;
	domain_type($1_t)
	domain_user_exemption_target($1_t)
	mls_rangetrans_target($1_t)
	mcs_constrained($1_t)
	role container_roles types $1_t;
')

########################################
## <summary>
##	The template to define a container
##	engine domain.
## </summary>
## <param name="domain_prefix">
##	<summary>
##	Domain prefix to be used.
##	</summary>
## </param>
#
template(`container_engine_domain_template',`
	gen_require(`
		attribute_role container_roles;
		attribute container_engine_domain;
	')

	type $1_t, container_engine_domain;
	role container_roles types $1_t;
	domain_type($1_t)
	domain_subj_id_change_exemption($1_t)
	domain_obj_id_change_exemption($1_t)
	domain_role_change_exemption($1_t)

	mls_file_read_to_clearance($1_t)
	mls_file_write_to_clearance($1_t)

	auth_use_nsswitch($1_t)
	storage_raw_rw_fixed_disk($1_t)

	optional_policy(`
		dbus_list_system_bus_runtime($1_t)
		dbus_system_bus_client($1_t)
	')
')

#######################################
## <summary>
##	Allow the specified container engine
##	domain all the rules required to
##	function as a system container engine.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_system_engine',`
	gen_require(`
		attribute container_engine_system_domain;
	')

	typeattribute $1 container_engine_system_domain;
')

#######################################
## <summary>
##	Allow the specified container engine
##	domain all the rules required to
##	function as a user container engine.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_user_engine',`
	gen_require(`
		attribute container_engine_user_domain;
	')

	typeattribute $1 container_engine_user_domain;
')

########################################
## <summary>
##	Execute generic container engines in the
##	container engine domain.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed to transition.
## </summary>
## </param>
#
interface(`container_domtrans_generic_engine',`
	gen_require(`
		type container_engine_t, container_engine_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, container_engine_exec_t, container_engine_t)
')

########################################
## <summary>
##	Execute generic container engines in the
##	container engine domain, and allow the
##	specified role the container domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the container domain.
##	</summary>
## </param>
#
interface(`container_run_generic_engine',`
	gen_require(`
		attribute_role container_roles;
	')

	container_domtrans_generic_engine($1)
	roleattribute $2 container_roles;
')

########################################
## <summary>
##	Make the specified type usable for files
##	that are executables for container engines.
## </summary>
## <param name="type">
##	<summary>
##	Type to be used for files.
##	</summary>
## </param>
#
interface(`container_engine_executable_file',`
	gen_require(`
		attribute container_engine_exec_type;
	')

	typeattribute $1 container_engine_exec_type;

	application_executable_file($1)
')

########################################
## <summary>
##	Send and receive messages from
##	container engines over dbus.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed access.
## </summary>
## </param>
#
interface(`container_engine_dbus_chat',`
	gen_require(`
		attribute container_engine_domain;
		class dbus send_msg;
	')

	allow $1 container_engine_domain:dbus send_msg;
	allow container_engine_domain $1:dbus send_msg;
')

########################################
## <summary>
##	All of the permissions necessary
##	for a container engine to manage
##	container processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_all_containers',`
	gen_require(`
		attribute container_domain;
	')

	allow $1 container_domain:process { getattr getsched setsched transition signal signull sigkill };
')

########################################
## <summary>
##	Allow the specified domain to
##	perform a type transition to
##	container domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`container_domtrans',`
	gen_require(`
		attribute container_domain;
	')

	allow $1 container_domain:process transition;
')

########################################
## <summary>
##	Connect to a container domain
##	over a unix stream socket.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_stream_connect_all_containers',`
	gen_require(`
		attribute container_domain;
		type container_runtime_t;
	')

	files_search_runtime($1)
	stream_connect_pattern($1, container_runtime_t, container_runtime_t, container_domain)
')

########################################
## <summary>
##	Allow the specified domain to
##	send all signals to a container
##	domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`container_signal_all_containers',`
	gen_require(`
		attribute container_domain;
	')

	allow $1 container_domain:process signal_perms;
')

########################################
## <summary>
##	Read and write container ptys.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_use_container_ptys',`
	gen_require(`
		type container_devpts_t;
	')

	allow $1 container_devpts_t:chr_file rw_term_perms;
')

########################################
## <summary>
##	Make the specified type usable as a mountpoint
##	for containers.
## </summary>
## <param name="file_type">
##	<summary>
##	Type to be used as a mountpoint.
##	</summary>
## </param>
#
interface(`container_mountpoint',`
	gen_require(`
		attribute container_mountpoint_type;
	')

	typeattribute $1 container_mountpoint_type;
')

########################################
## <summary>
##	Allow the specified domain to
##	create container files in the
##	root directory with a type
##	transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_file_root_filetrans',`
	gen_require(`
		type container_file_t;
	')

	files_root_filetrans($1, container_file_t, dir_file_class_set)
')

########################################
## <summary>
##	Allow the specified domain to
##	manage container file directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_dirs',`
	gen_require(`
		type container_file_t;
	')

	manage_dirs_pattern($1, container_file_t, container_file_t)
')

########################################
## <summary>
##	Allow the specified domain to
##	manage container files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_files',`
	gen_require(`
		type container_file_t;
	')

	manage_files_pattern($1, container_file_t, container_file_t)
')

########################################
## <summary>
##	Allow the specified domain to
##	manage container lnk files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_lnk_files',`
	gen_require(`
		type container_file_t;
	')

	manage_lnk_files_pattern($1, container_file_t, container_file_t)
')

########################################
## <summary>
##	Allow the specified domain to
##	manage container fifo files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_fifo_files',`
	gen_require(`
		type container_file_t;
	')

	manage_fifo_files_pattern($1, container_file_t, container_file_t)
')

########################################
## <summary>
##	Allow the specified domain to
##	manage container sock files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_sock_files',`
	gen_require(`
		type container_file_t;
	')

	manage_sock_files_pattern($1, container_file_t, container_file_t)
')

########################################
## <summary>
##	Allow the specified domain to
##	manage container chr files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_chr_files',`
	gen_require(`
		type container_file_t;
	')

	manage_chr_files_pattern($1, container_file_t, container_file_t)
')

########################################
## <summary>
##	Allow the specified domain to
##	manage container config home content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_home_config',`
	gen_require(`
		type container_conf_home_t;
	')

	allow $1 container_conf_home_t:dir manage_dir_perms;
	allow $1 container_conf_home_t:file manage_file_perms;
')

########################################
## <summary>
##	Allow the specified domain to create
##	objects in an xdg_config directory
##	with an automatic type transition to
##	the container config home type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="object">
##	<summary>
##	The object class of the object being created.
##	</summary>
## </param>
## <param name="name" optional="true">
##	<summary>
##	The name of the object being created.
##	</summary>
## </param>
#
interface(`container_config_home_filetrans',`
	gen_require(`
		type container_conf_home_t;
	')

	xdg_search_config_dirs($1)
	xdg_config_filetrans($1, container_conf_home_t, $2, $3)
')

########################################
## <summary>
##	Allow the specified domain to
##	relabel container files and
##	directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_relabel_all_content',`
	gen_require(`
		type container_file_t;
	')

	allow $1 container_file_t:dir_file_class_set { relabelfrom relabelto };
')

########################################
## <summary>
##	Allow the specified domain to
##	relabel container filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_relabel_fs',`
	gen_require(`
		type container_file_t;
	')

	allow $1 container_file_t:filesystem { relabelfrom relabelto };
')

########################################
## <summary>
##	Allow the specified domain to
##	get the attributes of container
##	filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_getattr_fs',`
	gen_require(`
		type container_file_t;
	')

	allow $1 container_file_t:filesystem getattr;
')

########################################
## <summary>
##	All of the rules required to
##	administrate a container
##	environment.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`container_admin',`
	gen_require(`
		attribute container_domain;
		type container_file_t;
	')

	allow $1 container_domain:process { ptrace signal_perms };
	ps_process_pattern($1, container_domain)

	files_search_var_lib($1)
	admin_pattern($1, container_file_t)
')
