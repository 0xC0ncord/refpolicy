## <summary>Policy for containers</summary>

#######################################
## <summary>
##	The template to define a container domain.
## </summary>
## <param name="domain_prefix">
##	<summary>
##	Domain prefix to be used.
##	</summary>
## </param>
#
template(`container_domain_template',`
	gen_require(`
		attribute_role container_roles;
		attribute container_domain;
	')

	type $1_t, container_domain;
	domain_type($1_t)
	domain_user_exemption_target($1_t)
	mls_rangetrans_target($1_t)
	mcs_constrained($1_t)
	role container_roles types $1_t;
')

########################################
## <summary>
##	Execute container domains in their
##	domain, and allow the specified
##	role that container domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
#
interface(`container_run_container_domain',`
	gen_require(`
		attribute container_domain;
		attribute_role container_roles;
	')

	allow $1 container_domain:process { signal transition };
	roleattribute $2 container_roles;

	allow container_domain $1:fd use;
	allow container_domain $1:fifo_file rw_fifo_file_perms;
	allow container_domain $1:process sigchld;
')

########################################
## <summary>
##	All of the permissions necessary
##	for a container engine to manage
##	container processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_all_containers',`
	gen_require(`
		attribute container_domain;
	')

	allow $1 container_domain:process { getattr getsched setsched transition signal signull sigkill };
')

########################################
## <summary>
##	Allow the specified domain to
##	perform a type transition to
##	container domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`container_domtrans',`
	gen_require(`
		attribute container_domain;
	')

	allow $1 container_domain:process transition;
')

########################################
## <summary>
##	Connect to a container domain
##	over a unix stream socket.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_stream_connect_all_containers',`
	gen_require(`
		attribute container_domain;
		type container_runtime_t;
	')

	files_search_runtime($1)
	stream_connect_pattern($1, container_runtime_t, container_runtime_t, container_domain)
')

########################################
## <summary>
##	Allow the specified domain to
##	send all signals to a container
##	domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`container_signal_all_containers',`
	gen_require(`
		attribute container_domain;
	')

	allow $1 container_domain:process signal_perms;
')

########################################
## <summary>
##	Make the specified type usable as a mountpoint
##	for containers.
## </summary>
## <param name="file_type">
##	<summary>
##	Type to be used as a mountpoint.
##	</summary>
## </param>
#
interface(`container_mountpoint',`
	gen_require(`
		attribute container_mountpoint_type;
	')

	typeattribute $1 container_mountpoint_type;
')

########################################
## <summary>
##	Allow the specified domain to
##	create container files in the
##	root directory with a type
##	transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_file_root_filetrans',`
	gen_require(`
		type container_file_t;
	')

	files_root_filetrans($1, container_file_t, dir_file_class_set)
')

########################################
## <summary>
##	Allow the specified domain to
##	manage container file directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_dirs',`
	gen_require(`
		type container_file_t;
	')

	manage_dirs_pattern($1, container_file_t, container_file_t)
')

########################################
## <summary>
##	Allow the specified domain to
##	manage container files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_files',`
	gen_require(`
		type container_file_t;
	')

	manage_files_pattern($1, container_file_t, container_file_t)
')

########################################
## <summary>
##	Allow the specified domain to
##	manage container lnk files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_lnk_files',`
	gen_require(`
		type container_file_t;
	')

	manage_lnk_files_pattern($1, container_file_t, container_file_t)
')

########################################
## <summary>
##	Allow the specified domain to
##	manage container fifo files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_fifo_files',`
	gen_require(`
		type container_file_t;
	')

	manage_fifo_files_pattern($1, container_file_t, container_file_t)
')

########################################
## <summary>
##	Allow the specified domain to
##	manage container sock files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_sock_files',`
	gen_require(`
		type container_file_t;
	')

	manage_sock_files_pattern($1, container_file_t, container_file_t)
')

########################################
## <summary>
##	Allow the specified domain to
##	manage container chr files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_chr_files',`
	gen_require(`
		type container_file_t;
	')

	manage_chr_files_pattern($1, container_file_t, container_file_t)
')

########################################
## <summary>
##	Allow the specified domain to
##	relabel container files and
##	directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_relabel_all_content',`
	gen_require(`
		type container_file_t;
	')

	allow $1 container_file_t:dir_file_class_set { relabelfrom relabelto };
')

########################################
## <summary>
##	Allow the specified domain to
##	relabel container filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_relabel_fs',`
	gen_require(`
		type container_file_t;
	')

	allow $1 container_file_t:filesystem { relabelfrom relabelto };
')

########################################
## <summary>
##	All of the rules required to
##	administrate a container
##	environment.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`container_admin',`
	gen_require(`
		attribute container_domain;
		type container_file_t;
	')

	allow $1 container_domain:process { ptrace signal_perms };
	ps_process_pattern($1, container_domain)

	files_search_var_lib($1)
	admin_pattern($1, container_file_t)
')
