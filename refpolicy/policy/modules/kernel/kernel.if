## <module name="kernel" layer="kernel">
## <summary>
##	Policy for kernel threads, security interface (selinuxfs),
##	proc filesystem, sysfs filesystem, and usb device filesystem.
## </summary>

########################################
## <interface name="kernel_make_userland_entrypoint">
## 	<description>
##		Gives kernel an entrypoint to the caller via
##		the entrypoint type.
## 	</description>
## 	<securitydesc>
##		...
## 	</securitydesc>
## 	<parameter name="domain">
##		The process type entered by kernel.
## 	</parameter>
## 	<parameter name="entrypoint">
##		The executable type for the entrypoint.
## 	</parameter>
## </interface>
#
define(`kernel_make_userland_entrypoint',`
	requires_block_template(`$0'_depend)

	domain_auto_trans(kernel_t, $2, $1)

	allow $1 kernel_t:fd use;
	allow kernel_t $1:fd use;
	allow kernel_t $1:fifo_file rw_file_perms;
	allow $1 kernel_t:process sigchld;
')

define(`kernel_make_userland_entrypoint_depend',`
	type kernel_t;

	class process { transition noatsecure siginh rlimitinh sigchld };
	class file { getattr read execute };
	class fifo_file rw_file_perms;
	class fd use;
')

########################################
## <interface name="kernel_share_state">
## 	<description>
## 		Allows the kernel to share state information with
## 		the caller.
## 	</description>
## 	<securitydesc>
## 		Gives a type access to state information about
## 		kernel processes
## 	</securitydesc>
## 	<parameter name="domain">
## 		The type of the process with which to share state information.
## 	</parameter>
## </interface>
#
define(`kernel_share_state',`
	requires_block_template(`$0'_depend)

	allow kernel_t $1:process share;
')

define(`kernel_share_state_depend',`
	type kernel_t;

	class process share;
')

########################################
## <interface name="kernel_use_file_descriptors">
## 	<description>
## 		Permits caller to use kernel file descriptors.
## 	</description>
## 	<securitydesc>
## 		Permits use of kernel file descriptors.
## 	</securitydesc>
## 	<parameter name="domain">
## 		The type of the process using the descriptors.
## 	</parameter>
## </interface>
#
define(`kernel_use_file_descriptors',`
	requires_block_template(`$0'_depend)

	allow $1 kernel_t:fd use;
')

define(`kernel_use_file_descriptors_depend',`
	type kernel_t;

	class fd use;
')

########################################
## <interface name="kernel_ignore_use_file_descriptors">
## 	<description>
## 		Do not audit attempts by the caller to use
## 		kernel file descriptors.
## 	</description>
## 	<securitydesc>
## 		Causes attempts to use kernel file descriptors
## 		to not be audited for caller.
## 	</securitydesc>
## 	<parameter name="domain">
## 		The type of process not to audit.
##	</parameter>
## </interface>
#
define(`kernel_ignore_use_file_descriptors',`
	requires_block_template(`$0'_depend)

	dontaudit $1 kernel_t:fd use;
')

define(`kernel_ignore_use_file_descriptors_depend',`
	type kernel_t;

	class fd use;
')

########################################
## <interface name="kernel_make_root_fs_mountpoint">
##	<description>
## 		Allows the kernel to mount filesystems on
## 		the caller.
##	</description>
##	<securitydesc>
## 		Givers kernel permission to mount on directories
## 		of the calling type.
##	</securitydesc>
##	<parameter name="mountpoint">
##		The type of the directory to use as a mountpoint.
##	</parameter>
## </interface>
#
define(`kernel_make_root_fs_mountpoint',`
	requires_block_template(`$0'_depend)

	allow kernel_t $1:dir mounton;
')

define(`kernel_make_root_fs_mountpoint_depend',`
	type kernel_t;

	class dir mounton;
')

########################################
## <interface name="kernel_make_process_identity_change_constraint_exception">
##	<description>
## 		Makes caller an exception to the constraint preventing
## 		changing of user identity.
##	</description>
##	<securitydesc>
## 		Allows changing of user identity in context of the calling process.
##	</securitydesc>
##	<parameter name="domain">
##		The process type to make an exception to the constraint.
##	</parameter>
## </interface>
#
define(`kernel_make_process_identity_change_constraint_exception',`
	requires_block_template(`$0'_depend)

	typeattribute $1 can_change_process_identity;
')

define(`kernel_make_process_identity_change_constraint_exception_depend',`
	attribute can_change_process_identity;
')

########################################
## <interface name="kernel_make_role_change_constraint_exception">
##	<description>
## 		Makes caller an exception to the constraint preventing
## 		changing of role.
##	</description>
##	<securitydesc>
## 		Allows changing of role in the context of the calling process.
##	</securitydesc>
##	<parameter name="domain">
##		The process type to make an exception to the constraint.
##	</parameter>
## </interface>
#
define(`kernel_make_role_change_constraint_exception',`
	requires_block_template(`$0'_depend)

	typeattribute $1 can_change_process_role;
')

define(`kernel_make_role_change_constraint_exception_depend',`
	attribute can_change_process_role;
')

########################################
## <interface name="kernel_make_object_identity_change_constraint_exception">
##	<description>
## 		Makes caller an exception to the constraint preventing 
## 		changing the user identity in object contexts.
##	</description>
##	<securitydesc>
## 		Allows caller to change user identities on objects
##	</securitydesc>
##	<parameter name="domain">
##		The process type to make an exception to the constraint.
##	</parameter>
## </interface>
#
define(`kernel_make_object_identity_change_constraint_exception',`
	requires_block_template(`$0'_depend)

	typeattribute $1 can_change_object_identity;
')

define(`kernel_make_object_identity_change_constraint_exception_depend',`
	attribute can_change_object_identity;
')

########################################
## 
## <interface name="kernel_load_module">
##	<description>
## 		Allows caller to load kernel modules
##	</description>
##	<securitydesc>
## 		Allows loading of kernel modules. 
##	</securitydesc>
##	<parameter name="domain">
##		The process type to allow to load kernel modules.
##	</parameter>
## </interface>
#
define(`kernel_load_module',`
	requires_block_template(`$0'_depend)

	allow $1 self:capability sys_module;
	typeattribute $1 can_load_kernmodule;
')

define(`kernel_load_module_depend',`
	attribute can_load_kernmodule;

	class capability sys_module;
')

########################################
##
## <interface name="kernel_get_selinux_enforcement_mode">
##	<description>
## 		Allows the caller to get the mode of policy enforcement
## 		(enforcing or permissive mode).
##	</description>
##	<securitydesc>
## 		Gives caller access to system state data.
##	</securitydesc>
##	<parameter name="domain">
##		The process type to allow to get the enforcing mode.
##	</parameter>
## </interface>
#
define(`kernel_get_selinux_enforcement_mode',`
	requires_block_template(`$0'_depend)

	allow $1 security_t:dir { read search getattr };
	allow $1 security_t:file { getattr read };
')

define(`kernel_get_selinux_enforcement_mode_depend',`
	type security_t;

	class dir { read search getattr };
	class file { getattr read };
')

########################################
## <interface name="kernel_set_selinux_enforcement_mode">
##	<description>
## 		Allow caller to set the mode of policy enforcement
## 		(enforcing or permissive mode).
##	</description>
##	<securitydesc>
## 		Caller becomes able to disable enforcement of policy.
##	</securitydesc>
##	<parameter name="domain">
##		The process type to allow to set the enforcement mode.
##	</parameter>
## </interface>
#
define(`kernel_set_selinux_enforcement_mode',`
	requires_block_template(`$0'_depend)

	allow $1 security_t:dir { read search getattr };
	allow $1 security_t:file { getattr read write };
	allow $1 security_t:security setenforce;
	auditallow $1 security_t:security setenforce;
	typeattribute $1 can_setenforce;
')

define(`kernel_set_selinux_enforcement_mode_depend',`
	type security_t;

	attribute can_setenforce;

	class dir { read search getattr };
	class file { getattr read write };
	class security setenforce;
')

########################################
## <interface name="kernel_load_selinux_policy">
##	<description>
## 		Allow caller to load the policy into the kernel.
##	</description>
##	<securitydesc>
## 		Caller can replace the policy being enforced.
##	</securitydesc>
##	<parameter name="domain">
##		The process type that will load the policy.
##	</parameter>
## </interface>
#
define(`kernel_load_selinux_policy',`
	requires_block_template(`$0'_depend)

	allow $1 security_t:dir { read search getattr };
	allow $1 security_t:file { getattr read write };
	allow $1 security_t:security load_policy;
	auditallow $1 security_t:security load_policy;
	typeattribute $1 can_load_policy;
')

define(`kernel_load_selinux_policy_depend',`
	type security_t;

	attribute can_load_policy;

	class dir { read search getattr };
	class file { getattr read write };
	class security load_policy;
')

########################################
## <interface name="kernel_set_selinux_boolean">
##	<description>
## 		Allow caller to set the state of Booleans to
## 		enable or disable conditional portions of the policy.
##	</description>
##	<securitydesc>
## 		Caller can change which of the conditional portions of 
## 		the policy are being enforced.
##	</securitydesc>
##	<parameter name="domain">
##		The process type allowed to set the Boolean.
##	</parameter>
##	<parameter name="booltype" optional="true">
##		The type of Booleans the caller is allowed to set.
##	</parameter>
## </interface>
#
define(`kernel_set_selinux_boolean',`
	requires_block_template(`$0'_depend)

	ifelse(`$2',`',`
		allow $1 security_t:dir { getattr search read };
		allow $1 security_t:file { getattr read write };
	',`
		allow $1 $2:dir { getattr search read };
		allow $1 $2:file { getattr read write };
	')

	allow $1 security_t:dir search;
	allow $1 security_t:security setbool;
	auditallow $1 security_t:security setbool;
')

define(`kernel_set_selinux_boolean_depend',`
	type security_t;

	class dir { read search getattr };
	class file { getattr read write };
	class security setbool;
')

########################################
## <interface name="kernel_set_selinux_security_parameters">
##	<description>
## 		Allow caller to set selinux security parameters.
##	</description>
##	<securitydesc>
## 		Caller can change security parameters.
##	</securitydesc>
##	<parameter name="domain">
##		The process type to allow to set security parameters.
##	</parameter>
## </interface>
#
define(`kernel_set_selinux_security_parameters',`
	requires_block_template(`$0'_depend)

	allow $1 security_t:dir { read search getattr };
	allow $1 security_t:file { getattr read write };
	allow $1 security_t:security setsecparam;
	auditallow $1 security_t:security setsecparam;
	typeattribute $1 can_setsecparam;
')

define(`kernel_set_selinux_security_parameters_depend',`
	type security_t;

	attribute can_setsecparam;

	class dir { read search getattr };
	class file { getattr read write };
	class security setsecparam;
')

########################################
## <interface name="kernel_validate_selinux_context">
##	<description>
## 		Allows caller to validate security contexts.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type permitted to validate contexts.
##	</parameter>
## </interface>
#
define(`kernel_validate_selinux_context',`
	requires_block_template(`$0'_depend)

	allow $1 security_t:dir { read search getattr };
	allow $1 security_t:file { getattr read write };
	allow $1 security_t:security check_context;
')

define(`kernel_validate_selinux_context_depend',`
	type security_t;

	class dir { read search getattr };
	class file { getattr read write };
	class security check_context;
')

########################################
## <interface name="kernel_compute_selinux_access_vector">
##	<description>
## 		Allows caller to compute an access vector.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type allowed to compute an access vector.
##	</parameter>
## </interface>
#
define(`kernel_compute_selinux_access_vector',`
	requires_block_template(`$0'_depend)

	allow $1 security_t:dir { read search getattr };
	allow $1 security_t:file { getattr read write };
	allow $1 security_t:security compute_av;
')

define(`kernel_compute_selinux_access_vector_depend',`
	type security_t;

	class dir { read search getattr };
	class file { getattr read write };
	class security compute_av;
')

########################################
## <interface name="kernel_compute_selinux_create_context">
##	<description>
## 		
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		
##	</parameter>
## </interface>
#
define(`kernel_compute_selinux_create_context',`
	requires_block_template(`$0'_depend)

	allow $1 security_t:dir { read search getattr };
	allow $1 security_t:file { getattr read write };
	allow $1 security_t:security compute_create;
')

define(`kernel_compute_selinux_create_context_depend',`
	type security_t;

	class dir { read search getattr };
	class file { getattr read write };
	class security compute_create;
')

########################################
## <interface name="kernel_compute_selinux_relabel_context">
##	<description>
## 		
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type to 
##	</parameter>
## </interface>
#
define(`kernel_compute_selinux_relabel_context',`
	requires_block_template(`$0'_depend)

	allow $1 security_t:dir { read search getattr };
	allow $1 security_t:file { getattr read write };
	allow $1 security_t:security compute_relabel;
')

define(`kernel_compute_selinux_relabel_context_depend',`
	type security_t;

	class dir { read search getattr };
	class file { getattr read write };
	class security compute_relabel;
')

########################################
## <interface name="kernel_compute_selinux_reachable_user_contexts">
##	<description>
## 		Allows caller to compute possible contexts for a user.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type allowed to compute user contexts.
##	</parameter>
## </interface>
#
define(`kernel_compute_selinux_reachable_user_contexts',`
	requires_block_template(`$0'_depend)

	allow $1 security_t:dir { read search getattr };
	allow $1 security_t:file { getattr read write };
	allow $1 security_t:security compute_user;
')

define(`kernel_compute_selinux_reachable_user_contexts_depend',`
	type security_t;

	class dir { read search getattr };
	class file { getattr read write };
	class security compute_user;
')

########################################
## <interface name="kernel_read_ring_buffer">
##	<description>
## 		Allows caller to read the ring buffer.
##	</description>
##	<securitydesc>
## 		Buffer read could have sensitive information from multiple doamins.
##	</securitydesc>
##	<parameter name="domain">
##		The process type allowed to read the ring buffer.
##	</parameter>
## </interface>
#
define(`kernel_read_ring_buffer',`
	requires_block_template(`$0'_depend)

	allow $1 kernel_t:system syslog_read;
')

define(`kernel_read_ring_buffer_depend',`
	type kernel_t;

	class system syslog_read;
')

########################################
## <interface name="kernel_ignore_read_ring_buffer">
##	<description>
## 		Ignore attempts by caller to read the ring buffer.
##	</description>
##	<securitydesc>
## 		Causes attepts to read potentially sensitive information
## 		from being audited.
##	</securitydesc>
##	<parameter name="domain">
##		The domain to not audit.
##	</parameter>
## </interface>
#
define(`kernel_ignore_read_ring_buffer',`
	requires_block_template(`$0'_depend)

	dontaudit $1 kernel_t:system syslog_read;
')

define(`kernel_ignore_read_ring_buffer_depend',`
	type kernel_t;

	class system syslog_read;
')

########################################
## <interface name="kernel_change_ring_buffer_level">
##	<description>
## 		
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		
##	</parameter>
## </interface>
#
define(`kernel_change_ring_buffer_level',`
	requires_block_template(`$0'_depend)

	allow $1 kernel_t:system syslog_console;
')

define(`kernel_change_ring_buffer_level_depend',`
	type kernel_t;

	class system syslog_console;
')

########################################
## <interface name="kernel_clear_ring_buffer">
##	<description>
## 		Allows the caller to clear the ring buffer.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type clearing the buffer.
##	</parameter>
## </interface>
#
define(`kernel_clear_ring_buffer',`
	requires_block_template(`$0'_depend)

	allow $1 kernel_t:system syslog_mod;
')

define(`kernel_clear_ring_buffer_depend',`
	type kernel_t;

	class system syslog_mod;
')

########################################
## <interface name="kernel_get_sysvipc_info">
##	<description>
## 		Allow caller to get information about an ipc socket.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		
##	</parameter>
## </interface>
#
define(`kernel_get_sysvipc_info',`
	requires_block_template(`$0'_depend)

	allow $1 kernel_t:system ipc_info;
')

define(`kernel_get_sysvipc_info_depend',`
	type kernel_t;

	class system ipc_info;
')

########################################
## <interface name="kernel_get_selinuxfs_mount_point">
##	<description>
## 		Gets the caller the mountpoint of the selinuxfs filesystem.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type requesting the selinuxfs mountpoint.
##	</parameter>
## </interface>
#
define(`kernel_get_selinuxfs_mount_point',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 proc_t:{ file lnk_file } read;
	allow $1 self:dir search;
	allow $1 self:file { getattr read };
')

define(`kernel_get_selinuxfs_mount_point_depend',`
	type proc_t;

	class dir search;
	class lnk_file read;
	class file { getattr read };
')

########################################
## <interface name="kernel_read_system_state">
##	<description>
## 		Allows caller to read system state information.
##	</description>
##	<securitydesc>
## 		State data contains information about multiple domains and may be privlaged.
##	</securitydesc>
##	<parameter name="domain">
##		The process type reading the system state information.
##	</parameter>
## </interface>
#
define(`kernel_read_system_state',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir r_dir_perms;
	allow $1 proc_t:lnk_file { getattr read };
	allow $1 proc_t:file r_file_perms;
')

define(`kernel_read_system_state_depend',`
	type proc_t;

	class dir r_dir_perms;
	class lnk_file { getattr read };
	class file r_file_perms;
')

########################################
## <interface name="kernel_ignore_read_system_state">
##	<description>
## 		Do not audit attempts by caller to 
## 		read system state information.
##	</description>
##	<securitydesc>
## 		Causes attempts to read system state data not to be auditted.
##	</securitydesc>
##	<parameter name="domain">
##		The process type not to audit.
##	</parameter>
## </interface>
#
define(`kernel_ignore_read_system_state',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:file read;
')

define(`kernel_ignore_read_system_state_depend',`
	type proc_t;

	class file read;
')

#######################################
## <interface name="kernel_read_software_raid_state">
##	<description>
## 		Allow caller to read the state information for software raid.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type reading software raid state.
##	</parameter>
## </interface>
#
define(`kernel_read_software_raid_state',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir r_dir_perms;
	allow $1 proc_mdstat_t:file r_file_perms;
')

define(`kernel_read_software_raid_state_depend',`
	type proc_t, proc_mdstat_t;

	class dir r_dir_perms;
	class file r_file_perms;
')

########################################
## <interface name="kernel_get_core_interface_attributes">
##	<description>
## 		Allows caller to get attribues of core kernel interfaces.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type getting the attibutes.
##	</parameter>
## </interface>
#
define(`kernel_get_core_interface_attributes',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir r_dir_perms;
	allow $1 proc_kcore_t:file getattr;
')

define(`kernel_get_core_interface_attributes_depend',`
	type proc_t, proc_kcore_t;

	class dir { search getattr read };
	class file getattr;
')

########################################
## <interface name="kernel_ignore_get_core_interface_attributes">
##	<description>
## 		Do not audit attempts to get the attributes of 
## 		core kernel interfaces.
##	</description>
##	<securitydesc>
## 		Causes attempts to get attributes of kernel interfaces to 
## 		not be auditted.
##	</securitydesc>
##	<parameter name="domain">
##		The process type to not audit.
##	</parameter>
## </interface>
#
define(`kernel_ignore_get_core_interface_attributes',`
	requires_block_template(`$0'_depend)

	dontaudit $1 proc_kcore_t:file getattr;
')

define(`kernel_ignore_get_core_interface_attributes_depend',`
	type proc_kcore_t;

	class file getattr;
')

########################################
## <interface name="kernel_read_messages">
##	<description>
## 		Allow caller to receive and read kernel messages.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type reading the messages.
##	</parameter>
## </interface>
#
define(`kernel_read_messages',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 proc_kmsg_t:file r_file_perms;
	typeattribute $1 can_receive_kernel_messages;
')

define(`kernel_read_messages_depend',`
	attribute can_receive_kernel_messages;

	type proc_kmsg_t, proc_t;

	class dir search;
	class file r_file_perms;
')

########################################
## <interface name="kernel_get_message_interface_attributes">
##	<description>
## 		Allow caller to get the attributes of kernel message
## 		interfaces.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type getting the attributes.
##	</parameter>
## </interface>
#
define(`kernel_get_message_interface_attributes',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 proc_kmsg_t:file getattr;
')

define(`kernel_get_message_interface_attributes_depend',`
	type proc_kmsg_t, proc_t;

	class dir search;
	class file getattr;
')

########################################
## <interface name="kernel_ignore_get_message_interface_attributes">
##	<description>
## 		Do not audit attempts by caller to get the attributes of kernel 
## 		message interfaces.
##	</description>
##	<securitydesc>
## 		Causes attempts by caller to get the attributes of kernel 
## 		message interfaces not to be auditted.
##	</securitydesc>
##	<parameter name="domain">
##		The process type not to audit.
##	</parameter>
## </interface>
#
define(`kernel_ignore_get_message_interface_attributes',`
	requires_block_template(`$0'_depend)

	dontaudit $1 proc_kmsg_t:file getattr;
')

define(`kernel_ignore_get_message_interface_attributes_depend',`
	type proc_kmsg_t, proc_t;

	class file getattr;
')

########################################
## <interface name="kernel_read_network_state">
##	<description>
## 		Allow caller to read the network state information.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type reading the state.
##	</parameter>
## </interface>
##
#
define(`kernel_read_network_state',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 proc_net_t:dir r_dir_perms;
	allow $1 proc_net_t:file r_file_perms;
')

define(`kernel_read_network_state_depend',`
	type proc_t, proc_net_t;

	class dir r_dir_perms;
	class file r_file_perms;
')

########################################
## <interface name="kernel_ignore_search_sysctl_dir">
##	<description>
## 		Do not audit attempts by caller to search the sysctl directory.
##	</description>
##	<securitydesc>
## 		Causes attempts by caller to search the sysctl directy not to be auditted.
##	</securitydesc>
##	<parameter name="domain">
##		The process type not to audit.
##	</parameter>
## </interface>
##
#
define(`kernel_ignore_search_sysctl_dir',`
	requires_block_template(`$0'_depend)

	dontaudit $1 sysctl_t:dir search;
')

define(`kernel_ignore_search_sysctl_dir_depend',`
	type sysctl_t;

	class dir search;
')

########################################
## <interface name="kernel_read_device_sysctl">
##	<description>
## 		Allow caller to read the sysctl device.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type to allow to read the sysctl device.
##	</parameter>
## </interface>
#
define(`kernel_read_device_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_dev_t:dir r_dir_perms;
	allow $1 sysctl_dev_t:file r_file_perms;
')

define(`kernel_read_device_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_dev_t;

	class dir r_dir_perms;
	class file r_file_perms;
')

########################################
## <interface name="kernel_modify_device_sysctl">
##	<description>
## 		Allows the caller to modify the sysctl device file.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type modifying the sysctl device.
##	</parameter>
## </interface>
#
define(`kernel_modify_device_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_dev_t:file rw_file_perms;
')

define(`kernel_modify_device_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_dev_t;

	class dir r_dir_perms;
	class file rw_file_perms;
')

########################################
## <interface name="kernel_read_virtual_memory_sysctl">
##	<description>
## 		Allow caller to read sysctl virtual memory.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		
##	</parameter>
## </interface>
##
#
define(`kernel_read_virtual_memory_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_vm_t:file r_file_perms;
')

define(`kernel_read_virtual_memory_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_vm_t;

	class dir r_dir_perms;
	class file r_file_perms;
')

########################################
## <interface name="kernel_modify_virtual_memory_sysctl">
##	<description>
## 		Allow caller to modify contents of sysctl virtual memory.
##	</description>
##	<securitydesc>
## 		Allows caller to modify sysctl virtual memory.
##	</securitydesc>
##	<parameter name="domain">
##		The process type modifying sysctl virtual memory.
##	</parameter>
## </interface>
#
define(`kernel_modify_virtual_memory_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_vm_t:file rw_file_perms;
')

define(`kernel_modify_virtual_memory_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_vm_t;

	class dir r_dir_perms;
	class file rw_file_perms;
')

########################################
## <interface name="kernel_ignore_search_network_sysctl_dir">
##	<description>
## 		Do not audit attempts by caller to search sysctl network directories.
##	</description>
##	<securitydesc>
## 		Causes attempts by the caller to search the sysctl network 
## 		directories not to be audited.
##	</securitydesc>
##	<parameter name="domain">
##		The process type not to audit.
##	</parameter>
## </interface>
#
define(`kernel_ignore_search_network_sysctl_dir',`
	requires_block_template(`$0'_depend)

	dontaudit $1 sysctl_net_t:dir search;
')

define(`kernel_ignore_search_network_sysctl_dir_depend',`
	type sysctl_net_t;

	class dir search;
')

########################################
## <interface name="kernel_read_network_sysctl">
##	<description>
## 		Allow caller to read sysctl network files.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type reading sysctl network files.
##	</parameter>
## </interface>
##
#
define(`kernel_read_network_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_net_t:dir r_dir_perms;
	allow $1 sysctl_net_t:file r_file_perms;
')

define(`kernel_read_network_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_net_t;

	class dir r_dir_perms;
	class file f_file_perms;
')

########################################

## <interface name="kernel_modify_network_sysctl">
##	<description>
## 		Allow caller to modiry contents of sysctl network files.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type modifying sysctl network files.
##	</parameter>
## </interface>
#
define(`kernel_modify_network_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_net_t:dir r_dir_perms;
	allow $1 sysctl_net_t:file rw_file_perms;
')

define(`kernel_modify_network_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_net_t;

	class dir r_dir_perms;
	class file rw_file_perms;
')

########################################
## <interface name="kernel_read_unix_sysctl">
##	<description>
## 		Allow caller to read unix sysctl files.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type reading unix sysctl files.
##	</parameter>
## </interface>
#
define(`kernel_read_unix_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_net_t:dir r_dir_perms;
	allow $1 sysctl_net_unix_t:file r_file_perms;
')

define(`kernel_read_net_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_net_t, sysctl_net_unix_t;

	class dir r_dir_perms;
	class file r_file_perms;
')

########################################
## <interface name="kernel_modify_unix_sysctl">
##	<description>
## 		Allow caller to modify contents of unix sysctl files.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type modifying contents of unix sysctl files.
##	</parameter>
## </interface>
#
define(`kernel_modify_unix_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_net_t:dir r_dir_perms;
	allow $1 sysctl_net_unix_t:file rw_file_perms;
')

define(`kernel_modify_net_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_net_t, sysctl_net_unix_t;

	class dir r_dir_perms;
	class file rw_file_perms;
')

########################################
## <interface name="kernel_read_hotplug_sysctl">
##	<description>
## 		Allow caller to read data from hotplug.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type reading hotplug data.
##	</parameter>
## </interface>
#
define(`kernel_read_hotplug_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_kernel_t:dir r_dir_perms;
	allow $1 sysctl_hotplug_t:file r_file_perms;
')

define(`kernel_read_hotplug_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_kernel_t, sysctl_hotplug_t;

	class dir r_dir_perms;
	class file r_file_perms;
')

########################################
## <interface name="kernel_modify_hotplug_sysctl">
##	<description>
## 		Allow caller to modify hotplug sysctl data.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type modifying hotplug sysctl data.
##	</parameter>
## </interface>
#
define(`kernel_modify_hotplug_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_kernel_t:dir r_dir_perms;
	allow $1 sysctl_hotplug_t:file rw_file_perms;
')

define(`kernel_modify_hotplug_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_kernel_t, sysctl_hotplug_t;

	class dir r_dir_perms;
	class file rw_file_perms;
')

########################################
## <interface name="kernel_read_modprobe_sysctl">
##	<description>
## 		Allow caller to read files containing modprobe information.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process domian reading modprobe information files.
##	</parameter>
## </interface>
#
define(`kernel_read_modprobe_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_kernel_t:dir r_dir_perms;
	allow $1 sysctl_modprobe_t:file r_file_perms;
')

define(`kernel_read_modprobe_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_kernel_t, sysctl_modprobe_t;

	class dir r_dir_perms;
	class file r_file_perms;
')

########################################
## <interface name="kernel_modify_modprobe_sysctl">
##	<description>
## 		Allow caller to modify files containing modprobe information.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process domian modifying modprobe information files.
##	</parameter>
## </interface>
#
define(`kernel_modify_modprobe_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_kernel_t:dir r_dir_perms;
	allow $1 sysctl_modprobe_t:file rw_file_perms;
')

define(`kernel_modify_modprobe_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_kernel_t, sysctl_modprobe_t;

	class dir r_dir_perms;
	class file rw_file_perms;
')

########################################
## <interface name="kernel_read_kernel_sysctl">
##	<description>
## 		Allow caller to read kernel sysctl files.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type reading kernel sysctl files.
##	</parameter>
## </interface>
#
define(`kernel_read_kernel_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_kernel_t:dir r_dir_perms;
	allow $1 sysctl_kernel_t:file r_file_perms;
')

define(`kernel_read_kernel_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_kernel_t;

	class dir r_dir_perms;
	class file r_file_perms;
')

########################################
## <interface name="kernel_modify_kernel_sysctl">
##	<description>
## 		Allow caller to modify kernel sysctl files.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type modifying kernel sysctl files.
##	</parameter>
## </interface>
#
define(`kernel_modify_kernel_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_kernel_t:dir r_dir_perms;
	allow $1 sysctl_kernel_t:file rw_file_perms;
')

define(`kernel_modify_kernel_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_kernel_t;

	class dir r_dir_perms;
	class file rw_file_perms;
')

########################################
## <interface name="kernel_read_fs_sysctl">
##	<description>
## 		Allow caller to read filesystem information.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type reading filesystem information.
##	</parameter>
## </interface>
#
define(`kernel_read_fs_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_fs_t:dir r_dir_perms;
	allow $1 sysctl_fs_t:file r_file_perms;
')

define(`kernel_read_fs_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_fs_t;

	class dir r_dir_perms;
	class file r_file_perms;
')

########################################
#
# kernel_modify_fs_sysctl(domain)
## <interface name="kernel_modify_fs_sysctl">
##	<description>
## 		Allow caller to modify filesystem information.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type modifying filesystem information.
##	</parameter>
## </interface>
#
define(`kernel_modify_fs_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_t:dir r_dir_perms;
	allow $1 sysctl_fs_t:dir r_dir_perms;
	allow $1 sysctl_fs_t:file rw_file_perms;
')

define(`kernel_modify_fs_sysctl_depend',`
	type proc_t, sysctl_t, sysctl_fs_t;

	class dir r_dir_perms;
	class file rw_file_perms;
')

########################################
## <interface name="kernel_read_irq_sysctl">
##	<description>
## 		Allows caller to read interrupt request information.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type reading interrupt request information.
##	</parameter>
## </interface>
#
define(`kernel_read_irq_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_irq_t:dir r_dir_perms;
	allow $1 sysctl_irq_t:file r_file_perms;
')

define(`kernel_read_irq_sysctl_depend',`
	type proc_t, sysctl_irq_t;

	class dir r_dir_perms;
	class file r_file_perms;
')

########################################
## <interface name="kernel_modify_irq_sysctl">
##	<description>
## 		Allows caller to modify interrupt request information.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type modifying interrupt request information.
##	</parameter>
## </interface>
##
#
define(`kernel_modify_irq_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 sysctl_irq_t:dir r_dir_perms;
	allow $1 sysctl_irq_t:file rw_file_perms;
')

define(`kernel_modify_irq_sysctl_depend',`
	type proc_t, sysctl_irq_t;

	class dir r_dir_perms;
	class file rw_file_perms;
')

########################################
#
# kernel_read_rpc_sysctl(domain)
#
define(`kernel_read_rpc_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 proc_net_t:dir search;
	allow $1 sysctl_rpc_t:dir r_dir_perms;
	allow $1 sysctl_rpc_t:file r_file_perms;
')

define(`kernel_read_rpc_sysctl_depend',`
	type proc_t, proc_net_t, sysctl_rpc_t;

	class dir r_dir_perms;
	class file r_file_perms;
')

########################################
#
# kernel_modify_rpc_sysctl(domain)
#
define(`kernel_modify_rpc_sysctl',`
	requires_block_template(`$0'_depend)

	allow $1 proc_t:dir search;
	allow $1 proc_net_t:dir search;
	allow $1 sysctl_rpc_t:dir r_dir_perms;
	allow $1 sysctl_rpc_t:file rw_file_perms;
')

define(`kernel_modify_rpc_sysctl_depend',`
	type proc_t, proc_net_t, sysctl_rpc_t;

	class dir r_dir_perms;
	class file rw_file_perms;
')

########################################
## <interface name="kernel_read_all_sysctl">
##	<description>
## 		Allow caller to read all sysctl information.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type reading the information.
##	</parameter>
## </interface>
#
define(`kernel_read_all_sysctl',`
	kernel_read_device_sysctl($1)
	kernel_read_virtual_memory_sysctl($1)
	kernel_read_network_sysctl($1)
	kernel_read_unix_sysctl($1)
	kernel_read_hotplug_sysctl($1)
	kernel_read_modprobe_sysctl($1)
	kernel_read_kernel_sysctl($1)
	kernel_read_fs_sysctl($1)
	kernel_read_irq_sysctl($1)
	kernel_read_rpc_sysctl($1)
')

########################################
## <interface name="kernel_modify_all_sysctl">
##	<description>
## 		Allow caller to modify all sysctl information.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type modifying the information.
##	</parameter>
## </interface>
#
define(`kernel_modify_all_sysctl',`
	kernel_modify_device_sysctl($1)
	kernel_modify_virtual_memory_sysctl($1)
	kernel_modify_network_sysctl($1)
	kernel_modify_unix_sysctl($1)
	kernel_modify_hotplug_sysctl($1)
	kernel_modify_modprobe_sysctl($1)
	kernel_modify_kernel_sysctl($1)
	kernel_modify_fs_sysctl($1)
	kernel_modify_irq_sysctl($1)
	kernel_modify_rpc_sysctl($1)
')

########################################
## <interface name="kernel_search_hardware_state_dir">
##	<description>
##		Search the directory containing hardware information.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`kernel_search_hardware_state_dir',`
	requires_block_template(`$0'_depend)

	allow $1 sysfs_t:dir search;
')

define(`kernel_search_hardware_state_dir_depend',`
	type sysfs_t;

	class dir search;
')

########################################
## <interface name="kernel_read_hardware_state">
##	<description>
## 		Allow caller to read hardware state information.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type reading hardware state information.
##	</parameter>
## </interface>
#
define(`kernel_read_hardware_state',`
	requires_block_template(`$0'_depend)

	allow $1 sysfs_t:dir r_dir_perms;
	allow $1 sysfs_t:{ file lnk_file } r_file_perms;
')

define(`kernel_read_hardware_state_depend',`
	type sysfs_t;

	class dir r_dir_perms;
	class file r_file_perms;
	class lnk_file r_file_perms;
')

########################################
## <interface name="kernel_modify_hardware_state">
##	<description>
## 		Allow caller to modify hardware state information.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type modifying hardware state information.
##	</parameter>
## </interface>
#
define(`kernel_modify_hardware_config_option',`
	requires_block_template(`$0'_depend)

	allow $1 sysfs_t:dir r_dir_perms;
	allow $1 sysfs_t:lnk_file r_file_perms;
	allow $1 sysfs_t:file rw_file_perms;
')

define(`kernel_modify_hardware_config_option_depend',`
	type sysfs_t;

	class dir r_dir_perms;
	class file rw_file_perms;
	class lnk_file r_file_perms;
')

########################################
## <interface name="kernel_kill_unlabeled_process">
##	<description>
##		Send a kill signal to unlabeled processes.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`kernel_kill_unlabeled_process',`
	requires_block_template(`$0'_depend)

	allow $1 unlabeled_t:process sigkill;
')

define(`kernel_kill_unlabeled_process_depend',`
	type unlabeled_t;

	class process sigkill;
')

########################################
## <interface name="kernel_signal_unlabeled_process">
##	<description>
##		Send general signals to unlabeled processes.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`kernel_signal_unlabeled_process',`
	requires_block_template(`$0'_depend)

	allow $1 unlabeled_t:process signal;
')

define(`kernel_signal_unlabeled_process_depend',`
	type unlabeled_t;

	class process signal;
')

########################################
## <interface name="kernel_signull_unlabeled_process">
##	<description>
##		Send a null signal to unlabeled processes.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`kernel_signull_unlabeled_process',`
	requires_block_template(`$0'_depend)

	allow $1 unlabeled_t:process signull;
')

define(`kernel_signull_unlabeled_process_depend',`
	type unlabeled_t;

	class process signull;
')

########################################
## <interface name="kernel_sigstop_unlabeled_process">
##	<description>
##		Send a stop signal to unlabeled processes.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`kernel_sigstop_unlabeled_process',`
	requires_block_template(`$0'_depend)

	allow $1 unlabeled_t:process sigstop;
')

define(`kernel_sigstop_unlabeled_process_depend',`
	type unlabeled_t;

	class process sigstop;
')

########################################
## <interface name="kernel_sigchld_unlabeled_process">
##	<description>
##		Send a child terminated signal to unlabeled processes.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`kernel_sigchld_unlabeled_process',`
	requires_block_template(`$0'_depend)

	allow $1 unlabeled_t:process sigchld;
')

define(`kernel_sigchld_unlabeled_process_depend',`
	type unlabeled_t;

	class process sigchld;
')

########################################
## <interface name="kernel_ignore_get_unlabeled_block_device_attributes">
##	<description>
## 		Do not audit attempts by caller to get attributes for 
## 		unlabeled block devices.
##	</description>
##	<securitydesc>
## 		Causes attempts by caller to get attributes on unlabeled 
## 		block devices to not be auditted.
##	</securitydesc>
##	<parameter name="domain">
##		The process type not to audit.
##	</parameter>
## </interface>
#
define(`kernel_ignore_get_unlabeled_block_device_attributes',`
	requires_block_template(`$0'_depend)

	allow $1 unlabeled_t:blk_file getattr;
')

define(`kernel_ignore_get_unlabeled_block_device_attributes_depend',`
	type unlabeled_t;

	class process getattr;
')

########################################
## <interface name="kernel_relabel_unlabeled_object">
##	<description>
## 		Allow caller to relabel unlabeled objects.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type relabeling the objects.
##	</parameter>
## </interface>
#
define(`kernel_relabel_unlabeled_object',`
	requires_block_template(`$0'_depend)

	allow $1 unlabeled_t:dir_file_class_set { getattr relabelfrom };
')

define(`kernel_relabel_unlabeled_object_depend',`
	type unlabeled_t;

	class dir { getattr relabelfrom };
	class file { getattr relabelfrom };
	class lnk_file { getattr relabelfrom };
	class fifo_file { getattr relabelfrom };
	class sock_file { getattr relabelfrom };
	class chr_file { getattr relabelfrom };
	class blk_file { getattr relabelfrom };
')

########################################
## <interface name="kernel_search_usb_hardware_state_dir">
##	<description>
##		Search the directory containing USB hardware information.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`kernel_search_usb_hardware_state_dir',`
	requires_block_template(`$0'_depend)

	allow $1 usbfs_t:dir search;
')

define(`kernel_search_usb_hardware_state_dir_depend',`
	type usbfs_t;

	class dir search;
')

########################################
## <interface name="kernel_list_usb_hardware">
##	<description>
## 		Allow caller to get a list of usb hardware.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type getting the list.
##	</parameter>
## </interface>
#
define(`kernel_list_usb_hardware',`
	requires_block_template(`$0'_depend)

	allow $1 usbfs_t:dir r_dir_perms;
	allow $1 usbfs_t:lnk_file r_file_perms;
	allow $1 usbfs_t:file getattr;
')

define(`kernel_list_usb_hardware_depend',`
	type usbfs_t;

	class dir r_dir_perms;
	class file getattr;
	class lnk_file r_file_perms;
')

########################################
## <interface name="kernel_read_usb_hardware_state">
##	<description>
##		Read USB hardware information using
##		the usbfs filesystem interface.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`kernel_read_usb_hardware_state',`
	requires_block_template(`$0'_depend)

	allow $1 usbfs_t:dir r_dir_perms;
	allow $1 usbfs_t:{ file lnk_file } r_file_perms;
')

define(`kernel_read_usb_hardware_state_depend',`
	type usbfs_t;

	class dir r_dir_perms;
	class file r_file_perms;
	class lnk_file r_file_perms;
')

########################################
## <interface name="kernel_modify_usb_hardware_config_option">
##	<description>
## 		Allow caller to modify usb hardware configuration files.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type modifying the options.
##	</parameter>
## </interface>
#
define(`kernel_modify_usb_hardware_config_option',`
	requires_block_template(`$0'_depend)

	allow $1 usbfs_t:dir r_dir_perms;
	allow $1 usbfs_t:lnk_file r_file_perms;
	allow $1 usbfs_t:file rw_file_perms;
')

define(`kernel_modify_usb_hardware_config_option_depend',`
	type usbfs_t;

	class dir r_dir_perms;
	class file rw_file_perms;
	class lnk_file r_file_perms;
')

###################################################################
#                                                                 #
# These interfaces are reversed, to decouple the base module from #
# the programs that the kernel runs, such as init and insmod, so  #
# the base module is self-contained.  These styles of interfaces  #
# should not be used anywhere else.                               #
#                                                                 #
###################################################################

########################################
## <interface name="kernel_sigchld_from">
##	<description>
## 		Receive sigchild from kernel.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type receiving the signal.
##	</parameter>
## </interface>
#
define(`kernel_sigchld_from',`
	requires_block_template(`$0'_depend)

	allow kernel_t $1:process sigchld;
')

define(`kernel_sigchld_from_depend',`
	type kernel_t;

	class process sigchld;
')

########################################
## <interface name="kernel_unlabeled_sigchld_from">
##	<description>
## 		Receive sigchld from unlabeled processes.
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		The process type receiving the signal.
##	</parameter>
## </interface>
#
define(`kernel_unlabeled_sigchld_from',`
	requires_block_template(`$0'_depend)

	allow unlabeled_t $1:process sigchld;
')

define(`kernel_unlabeled_sigchld_from_depend',`
	type unlabeled_t;

	class process sigchld;
')

########################################
## <interface name="kernel_read_directory_from">
##	<description>
## 		XXX FIXME
##	</description>
##	<securitydesc>
## 		
##	</securitydesc>
##	<parameter name="domain">
##		
##	</parameter>
## </interface>
#
define(`kernel_read_directory_from',`
	requires_block_template(`$0'_depend)

	allow kernel_t $1:dir r_dir_perms;
')

define(`kernel_read_directory_from_depend',`
	type kernel_t;

	class dir r_dir_perms;
')

## </module>
