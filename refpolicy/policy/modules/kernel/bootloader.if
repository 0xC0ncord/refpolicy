## <module name="bootloader">
## <summary>Policy for the kernel modules, kernel image, and bootloader.</summary>

########################################
## <interface name="bootloader_domtrans">
##	<description>
##		Execute bootloader in the bootloader domain.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_domtrans',`
	gen_require(`
		type bootloader_t;
		class process sigchld;
		class fd use;
		class fifo_file rw_file_perms;
	')

	domain_auto_trans($1, bootloader_exec_t, bootloader_t)

	allow $1 bootloader_t:fd use;
	allow bootloader_t $1:fd use;
	allow bootloader_t $1:fifo_file rw_file_perms;
	allow bootloader_t $1:process sigchld;
')

########################################
## <interface name="bootloader_run">
##	<description>
##		Execute bootloader interactively and do
##		a domain transition to the bootloader domain.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
##	<parameter name="role">
##		The role to be allowed the bootloader domain.
##	</parameter>
##	<parameter name="terminal">
##		The type of the terminal allow the bootloader domain to use.
##	</parameter>
## </interface>
#
interface(`bootloader_run',`
	gen_require(`
		type bootloader_t;
		class chr_file rw_file_perms;
	')

	bootloader_domtrans($1)

	role $2 types bootloader_t;
	allow bootloader_t $3:chr_file rw_file_perms;
')

########################################
## <interface name="bootloader_search_boot_dir">
##	<description>
##		Search the /boot directory.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_search_boot_dir',`
	gen_require(`
		type boot_t;
		class dir search;
	')

	allow $1 boot_t:dir search;
')

########################################
## <interface name="bootloader_dontaudit_search_boot">
##	<description>
##		Do not audit attempts to search the /boot directory.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_dontaudit_search_boot',`
	gen_require(`
		type boot_t;
		class dir search;
	')

	dontaudit $1 boot_t:dir search;
')

########################################
## <interface name="bootloader_rw_boot_symlinks">
##	<description>
##		Read and write symbolic links
##		in the /boot directory.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_rw_boot_symlinks',`
	gen_require(`
		type boot_t;
		class dir r_dir_perms;
		class lnk_file rw_file_perms;
	')

	allow $1 boot_t:dir r_dir_perms;
	allow $1 boot_t:lnk_file rw_file_perms;
')

########################################
## <interface name="bootloader_create_kernel">
##	<description>
##		Install a kernel into the /boot directory.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_create_kernel',`
	gen_require(`
		type boot_t;
		class dir ra_dir_perms;
		class file { getattr read write create };
		class lnk_file { getattr read create unlink };
	')

	allow $1 boot_t:dir ra_dir_perms;
	allow $1 boot_t:file { getattr read write create };
	allow $1 boot_t:lnk_file { getattr read create unlink };
')

########################################
## <interface name="bootloader_create_kernel_symbol_table">
##	<description>
##		Install a system.map into the /boot directory.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_create_kernel_symbol_table',`
	gen_require(`
		type boot_t, system_map_t;
		class dir ra_dir_perms;
		class file { rw_file_perms create };
	')

	allow $1 boot_t:dir ra_dir_perms;
	allow $1 system_map_t:file { rw_file_perms create };
')

########################################
## <interface name="bootloader_read_kernel_symbol_table">
##	<description>
##		Read system.map in the /boot directory.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_read_kernel_symbol_table',`
	gen_require(`
		type boot_t, system_map_t;
		class dir r_dir_perms;
		class file r_file_perms;
	')

	allow $1 boot_t:dir r_dir_perms;
	allow $1 system_map_t:file r_file_perms;
')

########################################
## <interface name="bootloader_delete_kernel">
##	<description>
##		Delete a kernel from /boot.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_delete_kernel',`
	gen_require(`
		type boot_t;
		class dir { r_dir_perms write remove_name };
		class file { getattr unlink };
	')

	allow $1 boot_t:dir { r_dir_perms write remove_name };
	allow $1 boot_t:file { getattr unlink };
')

########################################
## <interface name="bootloader_delete_kernel_symbol_table">
##	<description>
##		Delete a system.map in the /boot directory.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_delete_kernel_symbol_table',`
	gen_require(`
		type boot_t, system_map_t;
		class dir { r_dir_perms write remove_name };
		class file { getattr unlink };
	')

	allow $1 boot_t:dir { r_dir_perms write remove_name };
	allow $1 system_map_t:file { getattr unlink };
')

########################################
## <interface name="bootloader_read_config">
##	<description>
##		Read the bootloader configuration file.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_read_config',`
	gen_require(`
		type bootloader_etc_t;
		class file r_file_perms;
	')

	allow $1 bootloader_etc_t:file r_file_perms;
')

########################################
## <interface name="bootloader_rw_config">
##	<description>
##		Read and write the bootloader
##		configuration file.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_rw_config',`
	gen_require(`
		type bootloader_etc_t;
		class file rw_file_perms;
	')

	allow $1 bootloader_etc_t:file rw_file_perms;
')

########################################
## <interface name="bootloader_rw_tmp_file">
##	<description>
##		Read and write the bootloader
##		temporary data in /tmp.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_rw_tmp_file',`
	gen_require(`
		type bootloader_tmp_t;
		class file rw_file_perms;
	')

	# FIXME: read tmp_t dir
	allow $1 bootloader_tmp_t:file rw_file_perms;
')

########################################
## <interface name="bootloader_create_runtime_file">
##	<description>
##		Read and write the bootloader
##		temporary data in /tmp.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_create_runtime_file',`
	gen_require(`
		type boot_t, boot_runtime_t;
		class dir rw_dir_perms;
		class file { rw_file_perms create unlink };
	')

	allow $1 boot_t:dir rw_dir_perms;
	allow $1 boot_runtime_t:file { rw_file_perms create unlink };
	type_transition $1 boot_t:file boot_runtime_t;
')

########################################
## <interface name="bootloader_list_kernel_modules">
##	<description>
##		List the contents of the kernel module directories.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_list_kernel_modules',`
	gen_require(`
		type modules_object_t;
		class dir r_dir_perms;
	')

	allow $1 modules_object_t:dir r_dir_perms;
')

########################################
## <interface name="bootloader_read_kernel_modules">
##	<description>
##		Read kernel module files.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_read_kernel_modules',`
	gen_require(`
		type modules_object_t;
		class dir r_dir_perms;
		class lnk_file r_file_perms;
		class file r_file_perms;
	')

	allow $1 modules_object_t:dir r_dir_perms;
	allow $1 modules_object_t:lnk_file r_file_perms;
	allow $1 modules_object_t:file r_file_perms;
')

########################################
## <interface name="bootloader_write_kernel_modules">
##	<description>
##		Write kernel module files.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_write_kernel_modules',`
	gen_require(`
		attribute rw_kern_modules;
		type modules_object_t;
		class dir r_dir_perms;
		class file { write append };
	')

	allow $1 modules_object_t:dir r_dir_perms;
	allow $1 modules_object_t:file { write append };

	typeattribute $1 rw_kern_modules;
')

########################################
## <interface name="bootloader_manage_kernel_modules">
##	<description>
##		Create, read, write, and delete
##		kernel module files.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
interface(`bootloader_manage_kernel_modules',`
	gen_require(`
		attribute rw_kern_modules;
		type modules_object_t;
		class file { getattr create read write setattr unlink };
		class dir rw_dir_perms;
	')

	allow $1 modules_object_t:file { rw_file_perms create setattr unlink };
	allow $1 modules_object_t:dir rw_dir_perms;

	typeattribute $1 rw_kern_modules;
')

########################################
#
# bootloader_create_private_module_dir_entry(domain,privatetype,[class(es)])
#
interface(`bootloader_create_private_module_dir_entry',`
	gen_require(`
		type modules_object_t;
		class dir rw_dir_perms;
	')

	allow $1 modules_object_t:dir rw_dir_perms;

	# if a class is specified use it, else use file as default
	ifelse(`$3',`',`
		type_transition $1 modules_object_t:file $2;
	',`
		type_transition $1 modules_object_t:$3 $2;
	')
')

## </module>
