# Copyright (C) 2005 Tresys Technology, LLC
## <module name="domain" layer="system">
## <summary>Core policy for domains.</summary>

########################################
#
# domain_make_base_domain(domain)
#
define(`domain_make_base_domain',`
requires_block_template(`$0'_depend)

# mark as a domain
typeattribute $1 domain;

# allow the domain to read its /proc/pid entries
allow $1 self:dir { getattr search read };
allow $1 self:{ file lnk_file } { getattr read };

# allow $1 to create child processes in this domain
allow $1 self:process { fork sigchld };
')

define(`domain_make_base_domain_depend',`
attribute domain;
class dir { getattr search read };
class file { getattr read };
class lnk_file { getattr read };
')

########################################
#
# domain_make_domain(domain)
#
define(`domain_make_domain',`

# start with basic domain
domain_make_base_domain($1)

# Use trusted objects in /dev
devices_use_dev_null($1)
devices_use_dev_zero($1)
terminal_use_controlling_terminal($1)

# read the root directory
files_read_root_dir($1)

# send init a sigchld
init_sigchld($1)

# this seems highly questionable:
optional_policy(`rpm.te',`
rpm_use_file_descriptors($1)
rpm_read_pipe($1)
')
')

########################################
#
# domain_make_entrypoint_file(domain,entrypointfile)
#
define(`domain_make_entrypoint_file',`
requires_block_template(`$0'_depend)
allow $1 $2:file entrypoint;
files_make_file($2)
typeattribute $1 entry_type;
')

define(`domain_make_entrypoint_file_depend',`
attribute entry_type;
class file entrypoint;
')

########################################
#
# domain_make_file_descriptors_widely_inheritable(domain)
#
define(`domain_make_file_descriptors_widely_inheritable',`
requires_block_template(`$0'_depend)
typeattribute $1 privfd;
')

define(`domain_make_file_descriptors_widely_inheritable_depend',`
attribute privfd;
')

########################################
#
# domain_use_widely_inheritable_file_descriptors(domain)
#
define(`domain_use_widely_inheritable_file_descriptors',`
requires_block_template(`$0'_depend)
allow $1 privfd:fd use;
')

define(`domain_use_widely_inheritable_file_descriptors_depend',`
attribute privfd;
class fd use;
')

########################################
#
# domain_ignore_use_widely_inheritable_file_descriptors(domain)
#
define(`domain_ignore_use_widely_inheritable_file_descriptors',`
requires_block_template(`$0'_depend)
dontaudit $1 privfd:fd use;
')

define(`domain_ignore_use_widely_inheritable_file_descriptors_depend',`
attribute privfd;
class fd use;
')

########################################
#
# domain_set_all_domains_priorities(domain)
#
define(`domain_set_all_domains_priorities',`
requires_block_template(`$0'_depend)
allow $1 domain:process setsched;
')

define(`domain_set_all_domains_priorities_depend',`
attribute domain;
class process setsched;
')

########################################
#
# domain_signal_all_domains(domain)
#
define(`domain_signal_all_domains',`
requires_block_template(`$0'_depend)
allow $1 domain:process signal;
')

define(`domain_signal_all_domains_depend',`
attribute domain;
class process signal;
')

########################################
## <interface name="domain_signull_all_domains">
##	<description>
##		Send a null signal to all domains.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
##	<infoflow type="write" weight="1"/>
## </interface>
#
define(`domain_signull_all_domains',`
requires_block_template(`$0'_depend)
allow $1 domain:process signull;
')

define(`domain_signull_all_domains_depend',`
attribute domain;
class process signull;
')

########################################
#
# domain_kill_all_domains(domain)
#
define(`domain_kill_all_domains',`
requires_block_template(`$0'_depend)
allow $1 domain:process sigkill;
allow $1 self:capability kill;
')

define(`domain_kill_all_domains_depend',`
attribute domain;
class process sigkill;
class capability kill;
')

########################################
## <interface name="domain_read_all_domains_process_state">
##	<description>
##		Read the process state (/proc/pid) of all domains.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
##	<infoflow type="read" weight="10"/>
## </interface>
#
define(`domain_read_all_domains_process_state',`
requires_block_template(`$0'_depend)
allow $1 domain:dir { getattr search read };
allow $1 domain:lnk_file { getattr read };
allow $1 domain:file { getattr read };
allow $1 domain:process { getattr getsession };
')

define(`domain_read_all_domains_process_state_depend',`
attribute domain;
class dir { getattr search read };
class lnk_file { getattr read };
class file { getattr read };
class process { getattr getsession };
')

########################################
#
# domain_execute_all_entrypoint_programs(domain)
#
define(`domain_execute_all_entrypoint_programs',`
requires_block_template(`$0'_depend)
allow $1 entry_type:file { getattr read execute execute_no_trans };
')

define(`domain_execute_all_entrypoint_programs_depend',`
attribute entry_type;
class file { getattr read execute execute_no_trans };
')

########################################
#
# domain_read_all_entrypoint_programs(domain)
#
define(`domain_read_all_entrypoint_programs',`
requires_block_template(`$0'_depend)
allow $1 entry_type:{ file lnk_file } { getattr read };
')

define(`domain_read_all_entrypoint_programs_depend',`
attribute entry_type;
class file { getattr read };
')

## </module>
