## <module name="libraries" layer="system">
## <summary>Policy for system libraries.</summary>

########################################
## <interface name="libs_domtrans_ldconfig">
##	<description>
##		Execute ldconfig in the ldconfig domain.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`libs_domtrans_ldconfig',`
	requires_block_template(`$0'_depend)

	domain_auto_trans($1,ldconfig_exec_t,ldconfig_t)

	allow $1 ldconfig_t:fd use;
	allow ldconfig_t $1:fd use;
	allow ldconfig_t $1:fifo_file rw_file_perms;
	allow ldconfig_t $1:process sigchld;
')

define(`libs_domtrans_ldconfig_depend',`
	type ldconfig_t, ldconfig_exec_t;

	class file rx_file_perms;
	class process { transition noatsecure siginh rlimitinh sigchld };
	class fd use;
	class fifo_file rw_file_perms;
')

########################################
## <interface name="libs_run_ldconfig">
##	<description>
##		Execute ldconfig in the ldconfig domain.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
##	<parameter name="role">
##		The role to allow the ldconfig domain.
##	</parameter>
##	<parameter name="terminal">
##		The type of the terminal allow the ldconfig domain to use.
##	</parameter>
## </interface>
#
define(`libs_run_ldconfig',`
	requires_block_template(`$0'_depend)

	libs_domtrans_ldconfig($1)
	role $2 types ldconfig_t;
	allow ldconfig_t $3:chr_file { getattr read write ioctl };
')

define(`libs_run_ldconfig_depend',`
	type ldconfig_t;

	class chr_file { getattr read write ioctl };
')

########################################
## <interface name="libs_use_ld_so">
##	<description>
##		Use the dynamic link/loader for automatic loading
##		of shared libraries.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`libs_use_ld_so',`
	requires_block_template(`$0'_depend)

	files_read_generic_etc_files_directory($1)
	allow $1 lib_t:dir r_dir_perms;
	allow $1 lib_t:lnk_file r_file_perms;
	allow $1 ld_so_t:lnk_file r_file_perms;
	allow $1 ld_so_t:file rx_file_perms;
	allow $1 ld_so_cache_t:file r_file_perms;
')

define(`libs_use_ld_so_depend',`
	type lib_t, ld_so_t, ld_so_cache_t;

	class dir r_dir_perms;
	class lnk_file r_file_perms;
	class file rx_file_perms;
')

########################################
## <interface name="libs_legacy_use_ld_so">
##	<description>
##		Use the dynamic link/loader for automatic loading
##		of shared libraries with legacy support.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`libs_legacy_use_ld_so',`
	requires_block_template(`$0'_depend)

	libs_use_ld_so($1)
	allow $1 ld_so_t:file execmod;
	allow $1 ld_so_cache_t:file execute;
')

define(`libs_legacy_use_ld_so_depend',`
	type ld_so_t, ld_so_cache_t;

	class file { execute execmod };
')

########################################
## <interface name="libs_exec_ld_so">
##	<description>
##		Execute the dynamic link/loader in the caller's
##		domain.  This is commonly needed for the
##		/usr/bin/ldd program.  Note: this can be used
##		to execute any binary that the caller can
##		read, even if the caller does not have execute
##		permissions.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`libs_exec_ld_so',`
	requires_block_template(`$0'_depend)

	allow $1 lib_t:dir r_dir_perms;
	allow $1 lib_t:lnk_file r_file_perms;
	allow $1 ld_so_t:lnk_file r_file_perms;
	allow $1 ld_so_t:file { r_file_perms execute execute_no_trans };
')

define(`libs_exec_ld_so_depend',`
	type lib_t, ld_so_t;

	class dir r_dir_perms;
	class lnk_file r_file_perms;
	class file { r_file_perms execute execute_no_trans };
')

########################################
## <interface name="libs_rw_ld_so_cache">
##	<description>
##		Modify the dynamic link/loader's cached listing
##		of shared libraries.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`libs_rw_ld_so_cache',`
	requires_block_template(`$0'_depend)

	files_read_generic_etc_files_directory($1)
	allow $1 ld_so_cache_t:file rw_file_perms;
')

define(`libs_rw_ld_so_cache_depend',`
	type ld_so_cache_t;

	class file rw_file_perms;
')

########################################
## <interface name="libs_read_lib">
##	<description>
##		Read files in the library directories, such
##		as static libraries.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`libs_read_lib',`
	requires_block_template(`$0'_depend)

	allow $1 lib_t:dir r_dir_perms;
	allow $1 lib_t:{ file lnk_file } r_file_perms;
')

define(`libs_read_lib_depend',`
	type lib_t;

	class dir r_dir_perms;
	class lnk_file r_file_perms;
	class file r_file_perms;
')

########################################
## <interface name="libs_exec_lib_files">
##	<description>
##		Execute library scripts in the caller domain.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`libs_exec_lib_files',`
	requires_block_template(`$0'_depend)

	allow $1 lib_t:dir r_dir_perms;
	allow $1 lib_t:lnk_file r_file_perms;
	allow $1 lib_t:file { getattr read execute execute_no_trans };
')

define(`libs_exec_lib_files_depend',`
	type lib_t;

	class dir r_dir_perms;
	class lnk_file r_file_perms;
	class file { getattr read execute execute_no_trans };
')

########################################
## <interface name="libs_use_shared_libs">
##	<description>
##		Load and execute functions from shared libraries.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`libs_use_shared_libs',`
	requires_block_template(`$0'_depend)

	files_search_usr($1)
	allow $1 lib_t:dir r_dir_perms;
	allow $1 lib_t:lnk_file r_file_perms;
	allow $1 { shlib_t texrel_shlib_t }:lnk_file r_file_perms;
	allow $1 { shlib_t texrel_shlib_t }:file rx_file_perms;
')

define(`libs_use_shared_libs_depend',`
	type lib_t, shlib_t, texrel_shlib_t;

	class dir r_dir_perms;
	class lnk_file r_file_perms;
	class file rx_dir_perms;
')

########################################
## <interface name="libs_legacy_use_shared_libs">
##	<description>
##		Load and execute functions from shared libraries,
##		with legacy support.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
## </interface>
#
define(`libs_legacy_use_shared_libs',`
	requires_block_template(`$0'_depend)

	libs_use_shared_libs($1)
	allow $1 { shlib_t texrel_shlib_t }:file execmod;
')

define(`libs_legacy_use_shared_libs_depend',`
	type shlib_t, texrel_shlib_t;

	class file execmod;
')

## </module>
