## <module name="rpm" layer="system">
## <summary>Policy for the RPM package manager.</summary>

########################################
## <interface name="rpm_transition">
##	<description>
##		Execute rpm programs in the rpm domain.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
##	<infoflow type="write" weight="10"/>
## </interface>
#
define(`rpm_transition',`
	requires_block_template(`$0'_depend)

	allow $1 rpm_exec_t:file rx_file_perms;
	allow $1 rpm_t:process transition;
	type_transition $1 rpm_exec_t:process rpm_t;
	dontaudit $1 rpm_t:process { noatsecure siginh rlimitinh };

	allow $1 rpm_t:fd use;
	allow rpm_t $1:fd use;
	allow rpm_t $1:fifo_file rw_file_perms;
	allow rpm_t $1:process sigchld;
')

define(`rpm_transition_depend',`
	type rpm_t, rpm_exec_t;

	class file rx_file_perms;
	class process { transition noatsecure siginh rlimitinh sigchld };
	class fd use;
	class fifo_file rw_file_perms;
')

########################################
## <interface name="rpm_transition_add_role_use_terminal">
##	<description>
##		Execute RPM programs in the RPM domain.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
##	<parameter name="role">
##		The role to allow the RPM domain.
##	</parameter>
##	<parameter name="terminal">
##		The type of the terminal allow the RPM domain to use.
##	</parameter>
##	<infoflow type="both" weight="10"/>
## </interface>
#
define(`rpm_transition_add_role_use_terminal',`
	requires_block_template(`$0'_depend)

	rpm_transition($1)
	role $2 types rpm_t;
	role $2 types rpm_script_t;
	allow rpm_t $3:chr_file { getattr read write ioctl };
')

define(`rpm_transition_add_role_use_terminal_depend',`
	type rpm_t, rpm_script_t;

	class chr_file { getattr read write ioctl };
')

########################################
## <interface name="rpm_use_file_descriptors">
##	<description>
##		Inherit and use file descriptors from RPM.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
##	<infoflow type="read" weight="1"/>
## </interface>
#
define(`rpm_use_file_descriptors',`
	requires_block_template(`$0'_depend)

	allow $1 rpm_t:fd use;
')

define(`rpm_use_file_descriptors_depend',`
	type rpm_t;

	class fd use;
')

########################################
## <interface name="rpm_read_pipe">
##	<description>
##		Read from a RPM pipe.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
##	<infoflow type="read" weight="10"/>
## </interface>
#
define(`rpm_read_pipe',`
	requires_block_template(`$0'_depend)

	allow $1 rpm_t:fifo_file r_file_perms;
')

define(`rpm_read_pipe_depend',`
	type rpm_t;

	class fifo_file r_file_perms;
')

########################################
## <interface name="rpm_read_package_database">
##	<description>
##		Read RPM package database.
##	</description>
##	<parameter name="domain">
##		The type of the process performing this action.
##	</parameter>
##	<infoflow type="read" weight="10"/>
## </interface>
#
define(`rpm_read_package_database',`
	requires_block_template(`$0'_depend)

	allow $1 rpm_var_lib_t:dir r_dir_perms;
	allow $1 rpm_var_lib_t:file r_file_perms;
	allow $1 rpm_var_lib_t:lnk_file r_file_perms;
')

define(`rpm_read_package_database_depend',`
	type rpm_var_lib_t_t;

	class dir r_dir_perms;
	class lnk_file r_file_perms;
	class file r_file_perms;
')

########################################
#
# rpm_manage_package_database(domain)
#
define(`rpm_manage_package_database',`
	requires_block_template(`$0'_depend)

	allow $1 rpm_var_lib_t:dir rw_dir_perms;
	allow $1 rpm_var_lib_t:file { getattr create read write append unlink };
	allow $1 rpm_var_lib_t:lnk_file { getattr read write unlink };
')

define(`rpm_manage_package_database_depend',`
	type rpm_var_lib_t_t;

	class dir rw_dir_perms;
	class lnk_file { getattr read write unlink };
	class file { getattr create read write append unlink };
')

## </module>
