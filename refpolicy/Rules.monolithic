########################################
#
# Rules and Targets for building monolithic policies
#

# install paths
POLICYPATH = $(INSTALLDIR)/policy
LOADPATH = $(POLICYPATH)/$(POLVER)
HOMEDIRPATH = $(CONTEXTPATH)/files/homedir_template

FC := file_contexts
POLVER := policy.$(PV)

APPFILES += $(INSTALLDIR)/booleans

# for monolithic policy use all base and module to create policy
ALL_MODULES := $(strip $(BASE_MODS) $(MOD_MODS))

ALL_INTERFACES := $(ALL_MODULES:.te=.if)
ALL_TE_FILES := $(ALL_MODULES)
ALL_FC_FILES := $(ALL_MODULES:.te=.fc)

PRE_TE_FILES := $(SECCLASS) $(ISIDS) $(AVS) $(M4SUPPORT) $(POLDIR)/mls $(POLDIR)/mcs
POST_TE_FILES := $(USER_FILES) $(POLDIR)/constraints

POLICY_SECTIONS := tmp/pre_te_files.conf tmp/generated_definitions.conf tmp/all_interfaces.conf tmp/all_attrs_types.conf $(GLOBALBOOL) $(GLOBALTUN) tmp/only_te_rules.conf tmp/all_post.conf

HOMEDIR_TEMPLATE = homedir_template

# search layer dirs for source files
vpath %.te $(ALL_LAYERS)
vpath %.if $(ALL_LAYERS)
vpath %.fc $(ALL_LAYERS)

########################################
#
# default action: build policy locally
#
default: policy

policy: $(POLVER)

install: $(LOADPATH) $(FCPATH) $(APPFILES) $(USERPATH)/local.users

load: tmp/load

checklabels: $(FCPATH)
restorelabels: $(FCPATH)
relabel:  $(FCPATH)
resetlabels:  $(FCPATH)

########################################
#
# Build a binary policy locally
#
$(POLVER): policy.conf
	@echo "Compiling $(NAME) $(POLVER)"
ifneq ($(PV),$(KV))
	@echo
	@echo "WARNING: Policy version mismatch!  Is your OUTPUT_POLICY set correctly?"
	@echo
endif
	$(verbose) $(CHECKPOLICY) $^ -o $@

########################################
#
# Install a binary policy
#
$(LOADPATH): policy.conf
	@mkdir -p $(POLICYPATH)
	@echo "Compiling and installing $(NAME) $(LOADPATH)"
ifneq ($(PV),$(KV))
	@echo
	@echo "WARNING: Policy version mismatch!  Is your OUTPUT_POLICY set correctly?"
	@echo
endif
	$(verbose) $(CHECKPOLICY) $^ -o $@

########################################
#
# Load the binary policy
#
reload tmp/load: $(LOADPATH) $(FCPATH) $(APPFILES)
	@echo "Loading $(NAME) $(LOADPATH)"
	$(verbose) $(LOADPOLICY) -q $(LOADPATH)
	@touch tmp/load

########################################
#
# Construct a monolithic policy.conf
#
policy.conf: $(POLICY_SECTIONS)
	@echo "Creating $(NAME) policy.conf"
# checkpolicy can use the #line directives provided by -s for error reporting:
	$(verbose) m4 -D self_contained_policy $(M4PARAM) -s $^ > tmp/$@.tmp
	$(verbose) sed -e /^portcon/d -e /^nodecon/d -e /^netifcon/d < tmp/$@.tmp > $@
# the ordering of these ocontexts matters:
	$(verbose) grep ^portcon tmp/$@.tmp >> $@ || true
	$(verbose) grep ^netifcon tmp/$@.tmp >> $@ || true
	$(verbose) grep ^nodecon tmp/$@.tmp >> $@ || true

tmp/pre_te_files.conf: $(PRE_TE_FILES)
	@test -d tmp || mkdir -p tmp
	$(verbose) cat $^ > $@

tmp/generated_definitions.conf: $(ALL_TE_FILES)
# per-userdomain templates:
	@test -d tmp || mkdir -p tmp
	$(verbose) echo "define(\`base_per_userdomain_template',\`" > $@
	$(verbose) for i in $(patsubst %.te,%,$(notdir $(ALL_MODULES))); do \
		echo "ifdef(\`""$$i""_per_userdomain_template',\`""$$i""_per_userdomain_template("'$$*'")')" \
			>> $@ ;\
	done
	$(verbose) echo "')" >> $@
# define foo.te
	$(verbose) for i in $(notdir $(ALL_MODULES)); do \
		echo "define(\`$$i')" >> $@ ;\
	done
	$(verbose) $(SETTUN) $(BOOLEANS) >> $@

tmp/all_interfaces.conf: $(M4SUPPORT) $(ALL_INTERFACES)
ifeq ($(ALL_INTERFACES),)
	$(error No enabled modules! $(notdir $(MOD_CONF)) may need to be generated by using "make conf")
endif
	@test -d tmp || mkdir -p tmp
	$(verbose) m4 $^ | sed -e s/dollarsstar/\$$\*/g > $@

tmp/all_te_files.conf: $(ALL_TE_FILES)
ifeq ($(ALL_TE_FILES),)
	$(error No enabled modules! $(notdir $(MOD_CONF)) may need to be generated by using "make conf")
endif
	@test -d tmp || mkdir -p tmp
	$(verbose) cat $^ > $@
	$(call parse-rolemap,base,$@)

tmp/post_te_files.conf: $(POST_TE_FILES)
	@test -d tmp || mkdir -p tmp
	$(verbose) cat $^ > $@

# extract attributes and put them first. extract post te stuff
# like genfscon and put last.  portcon, nodecon, and netifcon
# is delayed since they are generated by m4
tmp/all_attrs_types.conf tmp/only_te_rules.conf tmp/all_post.conf: tmp/all_te_files.conf tmp/post_te_files.conf
	$(verbose) grep ^attribute tmp/all_te_files.conf > tmp/all_attrs_types.conf || true
	$(verbose) grep '^type ' tmp/all_te_files.conf >> tmp/all_attrs_types.conf
	$(verbose) cat tmp/post_te_files.conf > tmp/all_post.conf
	$(verbose) grep '^sid ' tmp/all_te_files.conf >> tmp/all_post.conf || true
	$(verbose) egrep '^fs_use_(xattr|task|trans)' tmp/all_te_files.conf >> tmp/all_post.conf || true
	$(verbose) grep ^genfscon tmp/all_te_files.conf >> tmp/all_post.conf || true
	$(verbose) sed -r -e /^attribute/d -e '/^type /d' -e /^genfscon/d \
			-e '/^sid /d' -e '/^fs_use_(xattr|task|trans)/d' \
			< tmp/all_te_files.conf > tmp/only_te_rules.conf

########################################
#
# Remove the dontaudit rules from the policy.conf
#
enableaudit: policy.conf
	@test -d tmp || mkdir -p tmp
	@echo "Removing dontaudit rules from policy.conf"
	$(verbose) grep -v dontaudit policy.conf > tmp/policy.audit
	$(verbose) mv tmp/policy.audit policy.conf

########################################
#
# Construct file_contexts
#
$(FC): tmp/$(FC).tmp $(FCSORT)
	$(verbose) $(FCSORT) $< $@
	$(verbose) grep -e HOME -e ROLE $@ > $(HOMEDIR_TEMPLATE)
	$(verbose) sed -i -e /HOME/d -e /ROLE/d $@

tmp/$(FC).tmp: $(M4SUPPORT) tmp/generated_definitions.conf $(ALL_FC_FILES)
ifeq ($(ALL_FC_FILES),)
	$(error No enabled modules! $(notdir $(MOD_CONF)) may need to be generated by using "make conf")
endif
	@echo "Creating $(NAME) file_contexts."
	@test -d tmp || mkdir -p tmp
	$(verbose) m4 $(M4PARAM) $^ > $@

########################################
#
# Install file_contexts
#
$(FCPATH): $(FC) $(LOADPATH) $(USERPATH)/system.users
	@echo "Validating $(NAME) file_contexts."
	$(verbose) $(SETFILES) -q -c $(LOADPATH) $(FC)
	@echo "Installing file_contexts."
	@mkdir -p $(CONTEXTPATH)/files
	$(verbose) install -m 644 $(FC) $(FCPATH)
	$(verbose) install -m 644 $(HOMEDIR_TEMPLATE) $(HOMEDIRPATH)
	$(verbose) $(GENHOMEDIRCON) -d $(TOPDIR) -t $(NAME) $(USEPWD)

########################################
#
# Run policy source checks
#
check: policy.conf $(FC)
	$(SECHECK) -s --profile=development --policy=policy.conf --fcfile=$(FC) > $@.res

longcheck: policy.conf $(FC)
	$(SECHECK) -s --profile=all --policy=policy.conf --fcfile=$(FC) > $@.res

########################################
#
# Appconfig files
#
$(APPDIR)/customizable_types: policy.conf
	@mkdir -p $(APPDIR)
	$(verbose) grep "^type .*customizable" $< | cut -d',' -f1 | cut -d' ' -f2 > tmp/customizable_types
	$(verbose) install -m 644 tmp/customizable_types $@ 

########################################
#
# Clean the sources
#
clean:
	rm -f policy.conf
	rm -f policy.$(PV)
	rm -f $(FC)
	rm -f $(HOMEDIR_TEMPLATE)
	rm -f *.res
	rm -fR tmp

.PHONY: default policy install load reload enableaudit checklabels restorelabels relabel check longcheck clean
